
PIDencoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080047f0  080047f0  000147f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004868  08004868  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004868  08004868  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004868  08004868  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000068  080048d8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  080048d8  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009258  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cf7  00000000  00000000  0002932c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  0002b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000819  00000000  00000000  0002bac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017aa8  00000000  00000000  0002c2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c241  00000000  00000000  00043d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089bc1  00000000  00000000  0004ffca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034bc  00000000  00000000  000d9b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000dd048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080047d8 	.word	0x080047d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080047d8 	.word	0x080047d8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__gesf2>:
 8000c78:	f04f 3cff 	mov.w	ip, #4294967295
 8000c7c:	e006      	b.n	8000c8c <__cmpsf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__lesf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	e002      	b.n	8000c8c <__cmpsf2+0x4>
 8000c86:	bf00      	nop

08000c88 <__cmpsf2>:
 8000c88:	f04f 0c01 	mov.w	ip, #1
 8000c8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d011      	beq.n	8000cc8 <__cmpsf2+0x40>
 8000ca4:	b001      	add	sp, #4
 8000ca6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000caa:	bf18      	it	ne
 8000cac:	ea90 0f01 	teqne	r0, r1
 8000cb0:	bf58      	it	pl
 8000cb2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cb6:	bf88      	it	hi
 8000cb8:	17c8      	asrhi	r0, r1, #31
 8000cba:	bf38      	it	cc
 8000cbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cc0:	bf18      	it	ne
 8000cc2:	f040 0001 	orrne.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	d102      	bne.n	8000cd4 <__cmpsf2+0x4c>
 8000cce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cd2:	d105      	bne.n	8000ce0 <__cmpsf2+0x58>
 8000cd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd8:	d1e4      	bne.n	8000ca4 <__cmpsf2+0x1c>
 8000cda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cde:	d0e1      	beq.n	8000ca4 <__cmpsf2+0x1c>
 8000ce0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_cfrcmple>:
 8000ce8:	4684      	mov	ip, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4661      	mov	r1, ip
 8000cee:	e7ff      	b.n	8000cf0 <__aeabi_cfcmpeq>

08000cf0 <__aeabi_cfcmpeq>:
 8000cf0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cf2:	f7ff ffc9 	bl	8000c88 <__cmpsf2>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	bf48      	it	mi
 8000cfa:	f110 0f00 	cmnmi.w	r0, #0
 8000cfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d00 <__aeabi_fcmpeq>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff fff4 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d08:	bf0c      	ite	eq
 8000d0a:	2001      	moveq	r0, #1
 8000d0c:	2000      	movne	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_fcmplt>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff ffea 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d1c:	bf34      	ite	cc
 8000d1e:	2001      	movcc	r0, #1
 8000d20:	2000      	movcs	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_fcmple>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffe0 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d30:	bf94      	ite	ls
 8000d32:	2001      	movls	r0, #1
 8000d34:	2000      	movhi	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_fcmpge>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffd2 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d44:	bf94      	ite	ls
 8000d46:	2001      	movls	r0, #1
 8000d48:	2000      	movhi	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_fcmpgt>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffc8 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d58:	bf34      	ite	cc
 8000d5a:	2001      	movcc	r0, #1
 8000d5c:	2000      	movcs	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_f2uiz>:
 8000d64:	0042      	lsls	r2, r0, #1
 8000d66:	d20e      	bcs.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30b      	bcc.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d409      	bmi.n	8000d8c <__aeabi_f2uiz+0x28>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr
 8000d8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d90:	d101      	bne.n	8000d96 <__aeabi_f2uiz+0x32>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d102      	bne.n	8000d9c <__aeabi_f2uiz+0x38>
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9a:	4770      	bx	lr
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <PIDController_Init>:
 *      Author: User
 */
#include"PID.h"
#include"gpio.h"
#include"tim.h"
void PIDController_Init(PIDController*pid){
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	//Clear controller variables
	pid->integrator=0.0f;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError=0.0f;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator=0.0f;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f04f 0200 	mov.w	r2, #0
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement=0.0f;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f04f 0200 	mov.w	r2, #0
 8000dca:	631a      	str	r2, [r3, #48]	; 0x30
	pid->out=0.0f;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f04f 0200 	mov.w	r2, #0
 8000dd2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <PIDController_Update>:

float  PIDController_Update(PIDController*pid, float setpoint, float measurement, float Kp, float Ki, float Kd){
 8000dde:	b5b0      	push	{r4, r5, r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	603b      	str	r3, [r7, #0]
	//Error signal
	float error=setpoint-measurement;
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	68b8      	ldr	r0, [r7, #8]
 8000df0:	f7ff fce8 	bl	80007c4 <__aeabi_fsub>
 8000df4:	4603      	mov	r3, r0
 8000df6:	617b      	str	r3, [r7, #20]
	//Proportional
	float proportional=Kp*error;
 8000df8:	6979      	ldr	r1, [r7, #20]
 8000dfa:	6838      	ldr	r0, [r7, #0]
 8000dfc:	f7ff fdec 	bl	80009d8 <__aeabi_fmul>
 8000e00:	4603      	mov	r3, r0
 8000e02:	613b      	str	r3, [r7, #16]
	//Integral
	pid->integrator=pid->integrator+0.5f*Ki*pid->T*(error+pid->prevError);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000e08:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e0e:	f7ff fde3 	bl	80009d8 <__aeabi_fmul>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	f7ff fddb 	bl	80009d8 <__aeabi_fmul>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461d      	mov	r5, r3
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2a:	6979      	ldr	r1, [r7, #20]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fccb 	bl	80007c8 <__addsf3>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4619      	mov	r1, r3
 8000e36:	4628      	mov	r0, r5
 8000e38:	f7ff fdce 	bl	80009d8 <__aeabi_fmul>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4620      	mov	r0, r4
 8000e42:	f7ff fcc1 	bl	80007c8 <__addsf3>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
	//Anti-wind-up via integrator clamping
	if(pid->integrator>pid->limMaxInt){
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	4619      	mov	r1, r3
 8000e58:	4610      	mov	r0, r2
 8000e5a:	f7ff ff79 	bl	8000d50 <__aeabi_fcmpgt>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d004      	beq.n	8000e6e <PIDController_Update+0x90>
		pid->integrator=pid->limMaxInt;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	69da      	ldr	r2, [r3, #28]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
 8000e6c:	e00e      	b.n	8000e8c <PIDController_Update+0xae>
	}
	else if(pid->integrator<pid->limMinInt){
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	4619      	mov	r1, r3
 8000e78:	4610      	mov	r0, r2
 8000e7a:	f7ff ff4b 	bl	8000d14 <__aeabi_fcmplt>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <PIDController_Update+0xae>
		pid->integrator=pid->limMinInt;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	699a      	ldr	r2, [r3, #24]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	//Derivative (band-limited differntiator)
	pid->differentiator=-(2.0f*Kd*(measurement-pid->prevMeasurement)+(2.0f*pid->tau-pid->T)*pid->differentiator)/(2.0f*pid->tau+pid->T);
 8000e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fc99 	bl	80007c8 <__addsf3>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461c      	mov	r4, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff fc8f 	bl	80007c4 <__aeabi_fsub>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f7ff fd94 	bl	80009d8 <__aeabi_fmul>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461c      	mov	r4, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fc84 	bl	80007c8 <__addsf3>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4610      	mov	r0, r2
 8000ecc:	f7ff fc7a 	bl	80007c4 <__aeabi_fsub>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4610      	mov	r0, r2
 8000edc:	f7ff fd7c 	bl	80009d8 <__aeabi_fmul>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f7ff fc6f 	bl	80007c8 <__addsf3>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fc66 	bl	80007c8 <__addsf3>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4610      	mov	r0, r2
 8000f08:	f7ff fc5e 	bl	80007c8 <__addsf3>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4620      	mov	r0, r4
 8000f12:	f7ff fe15 	bl	8000b40 <__aeabi_fdiv>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
	//Compute output and apply limits
	pid->out = proportional + pid->integrator + pid->differentiator;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	6939      	ldr	r1, [r7, #16]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fc4f 	bl	80007c8 <__addsf3>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f32:	4619      	mov	r1, r3
 8000f34:	4610      	mov	r0, r2
 8000f36:	f7ff fc47 	bl	80007c8 <__addsf3>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	635a      	str	r2, [r3, #52]	; 0x34
	if (pid->out > pid->limMax) {
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	f7ff feff 	bl	8000d50 <__aeabi_fcmpgt>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d004      	beq.n	8000f62 <PIDController_Update+0x184>
	 pid->out = pid->limMax;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	695a      	ldr	r2, [r3, #20]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000f60:	e00e      	b.n	8000f80 <PIDController_Update+0x1a2>
	 } else if (pid->out < pid->limMin) {
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	f7ff fed1 	bl	8000d14 <__aeabi_fcmplt>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <PIDController_Update+0x1a2>
	 pid->out = pid->limMin;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	691a      	ldr	r2, [r3, #16]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	635a      	str	r2, [r3, #52]	; 0x34
	 }
	//Store error and measurement for later use
	 pid->prevError = error;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
	 pid->prevMeasurement = measurement;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	631a      	str	r2, [r3, #48]	; 0x30
	 //Return controller output
	 return pid->out;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34

}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bdb0      	pop	{r4, r5, r7, pc}

08000f98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <MX_GPIO_Init+0xa8>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a23      	ldr	r2, [pc, #140]	; (8001040 <MX_GPIO_Init+0xa8>)
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_GPIO_Init+0xa8>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0310 	and.w	r3, r3, #16
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_GPIO_Init+0xa8>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <MX_GPIO_Init+0xa8>)
 8000fca:	f043 0320 	orr.w	r3, r3, #32
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <MX_GPIO_Init+0xa8>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0320 	and.w	r3, r3, #32
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <MX_GPIO_Init+0xa8>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a17      	ldr	r2, [pc, #92]	; (8001040 <MX_GPIO_Init+0xa8>)
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_GPIO_Init+0xa8>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_GPIO_Init+0xa8>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <MX_GPIO_Init+0xa8>)
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_GPIO_Init+0xa8>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001012:	480c      	ldr	r0, [pc, #48]	; (8001044 <MX_GPIO_Init+0xac>)
 8001014:	f001 f814 	bl	8002040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2302      	movs	r3, #2
 8001028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	4619      	mov	r1, r3
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <MX_GPIO_Init+0xac>)
 8001032:	f000 fe81 	bl	8001d38 <HAL_GPIO_Init>

}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000
 8001044:	40011000 	.word	0x40011000

08001048 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001050:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001054:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d013      	beq.n	8001088 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001060:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001064:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001068:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00b      	beq.n	8001088 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001070:	e000      	b.n	8001074 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001072:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001074:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f9      	beq.n	8001072 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800107e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001088:	687b      	ldr	r3, [r7, #4]
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	int i=0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	e009      	b.n	80010be <_write+0x2a>
		ITM_SendChar((*ptr++));
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1c5a      	adds	r2, r3, #1
 80010ae:	60ba      	str	r2, [r7, #8]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ffc8 	bl	8001048 <ITM_SendChar>
	for(i=0; i<len; i++)
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3301      	adds	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	dbf1      	blt.n	80010aa <_write+0x16>
	return len;
 80010c6:	687b      	ldr	r3, [r7, #4]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <Motors_RP>:
float Motors_RP(float SampleTime, float N_round)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
	new_count = TIM4->CNT;
 80010da:	4b55      	ldr	r3, [pc, #340]	; (8001230 <Motors_RP+0x160>)
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	b29a      	uxth	r2, r3
 80010e0:	4b54      	ldr	r3, [pc, #336]	; (8001234 <Motors_RP+0x164>)
 80010e2:	801a      	strh	r2, [r3, #0]

	count_state = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4);
 80010e4:	4b54      	ldr	r3, [pc, #336]	; (8001238 <Motors_RP+0x168>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	2b10      	cmp	r3, #16
 80010f0:	bf0c      	ite	eq
 80010f2:	2301      	moveq	r3, #1
 80010f4:	2300      	movne	r3, #0
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b50      	ldr	r3, [pc, #320]	; (800123c <Motors_RP+0x16c>)
 80010fc:	701a      	strb	r2, [r3, #0]

	if (count_state)
 80010fe:	4b4f      	ldr	r3, [pc, #316]	; (800123c <Motors_RP+0x16c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d03e      	beq.n	8001186 <Motors_RP+0xb6>
	{
		if (new_count <= count)
 8001108:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <Motors_RP+0x164>)
 800110a:	881a      	ldrh	r2, [r3, #0]
 800110c:	4b4c      	ldr	r3, [pc, #304]	; (8001240 <Motors_RP+0x170>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d809      	bhi.n	8001128 <Motors_RP+0x58>
		{ // Check for counter underflow
			diff = count - new_count;
 8001114:	4b4a      	ldr	r3, [pc, #296]	; (8001240 <Motors_RP+0x170>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b46      	ldr	r3, [pc, #280]	; (8001234 <Motors_RP+0x164>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	461a      	mov	r2, r3
 8001122:	4b48      	ldr	r3, [pc, #288]	; (8001244 <Motors_RP+0x174>)
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e009      	b.n	800113c <Motors_RP+0x6c>
		}
		else
		{
			diff = (65536 - new_count) + count;
 8001128:	4b42      	ldr	r3, [pc, #264]	; (8001234 <Motors_RP+0x164>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001130:	4a43      	ldr	r2, [pc, #268]	; (8001240 <Motors_RP+0x170>)
 8001132:	8812      	ldrh	r2, [r2, #0]
 8001134:	4413      	add	r3, r2
 8001136:	461a      	mov	r2, r3
 8001138:	4b42      	ldr	r3, [pc, #264]	; (8001244 <Motors_RP+0x174>)
 800113a:	601a      	str	r2, [r3, #0]
		}
		speedM = (float)diff * 1000.0f / (N_round * SampleTime) * -1.0;
 800113c:	4b41      	ldr	r3, [pc, #260]	; (8001244 <Motors_RP+0x174>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fbf1 	bl	8000928 <__aeabi_ui2f>
 8001146:	4603      	mov	r3, r0
 8001148:	493f      	ldr	r1, [pc, #252]	; (8001248 <Motors_RP+0x178>)
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fc44 	bl	80009d8 <__aeabi_fmul>
 8001150:	4603      	mov	r3, r0
 8001152:	461c      	mov	r4, r3
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	6838      	ldr	r0, [r7, #0]
 8001158:	f7ff fc3e 	bl	80009d8 <__aeabi_fmul>
 800115c:	4603      	mov	r3, r0
 800115e:	4619      	mov	r1, r3
 8001160:	4620      	mov	r0, r4
 8001162:	f7ff fced 	bl	8000b40 <__aeabi_fdiv>
 8001166:	4603      	mov	r3, r0
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fa7f 	bl	800066c <__aeabi_f2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fad1 	bl	800071c <__aeabi_d2f>
 800117a:	4603      	mov	r3, r0
 800117c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001180:	4a32      	ldr	r2, [pc, #200]	; (800124c <Motors_RP+0x17c>)
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	e032      	b.n	80011ec <Motors_RP+0x11c>
	}
	else
	{
		if (new_count >= count)
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <Motors_RP+0x164>)
 8001188:	881a      	ldrh	r2, [r3, #0]
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <Motors_RP+0x170>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d309      	bcc.n	80011a6 <Motors_RP+0xd6>
		{ // Check for counter overflow
			diff = new_count - count;
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <Motors_RP+0x164>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	4b29      	ldr	r3, [pc, #164]	; (8001240 <Motors_RP+0x170>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <Motors_RP+0x174>)
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e009      	b.n	80011ba <Motors_RP+0xea>
		}
		else
		{
			diff = (65536 - count) + new_count;
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <Motors_RP+0x170>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80011ae:	4a21      	ldr	r2, [pc, #132]	; (8001234 <Motors_RP+0x164>)
 80011b0:	8812      	ldrh	r2, [r2, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <Motors_RP+0x174>)
 80011b8:	601a      	str	r2, [r3, #0]
		}
		speedM = (float)diff * 1000.0f / (N_round* SampleTime);
 80011ba:	4b22      	ldr	r3, [pc, #136]	; (8001244 <Motors_RP+0x174>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fbb2 	bl	8000928 <__aeabi_ui2f>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4920      	ldr	r1, [pc, #128]	; (8001248 <Motors_RP+0x178>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fc05 	bl	80009d8 <__aeabi_fmul>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461c      	mov	r4, r3
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f7ff fbff 	bl	80009d8 <__aeabi_fmul>
 80011da:	4603      	mov	r3, r0
 80011dc:	4619      	mov	r1, r3
 80011de:	4620      	mov	r0, r4
 80011e0:	f7ff fcae 	bl	8000b40 <__aeabi_fdiv>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <Motors_RP+0x17c>)
 80011ea:	601a      	str	r2, [r3, #0]
	}

	rdps = -2.0f * pi * speedM;
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <Motors_RP+0x17c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fa3b 	bl	800066c <__aeabi_f2d>
 80011f6:	a30c      	add	r3, pc, #48	; (adr r3, 8001228 <Motors_RP+0x158>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7fe ffa8 	bl	8000150 <__aeabi_dmul>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fa88 	bl	800071c <__aeabi_d2f>
 800120c:	4603      	mov	r3, r0
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <Motors_RP+0x180>)
 8001210:	6013      	str	r3, [r2, #0]
	count = new_count;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <Motors_RP+0x164>)
 8001214:	881a      	ldrh	r2, [r3, #0]
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <Motors_RP+0x170>)
 8001218:	801a      	strh	r2, [r3, #0]

	return rdps;
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <Motors_RP+0x180>)
 800121c:	681b      	ldr	r3, [r3, #0]
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	bf00      	nop
 8001228:	c083126f 	.word	0xc083126f
 800122c:	c01921ca 	.word	0xc01921ca
 8001230:	40000800 	.word	0x40000800
 8001234:	200000ce 	.word	0x200000ce
 8001238:	2000016c 	.word	0x2000016c
 800123c:	200000cc 	.word	0x200000cc
 8001240:	200000bc 	.word	0x200000bc
 8001244:	200000c0 	.word	0x200000c0
 8001248:	447a0000 	.word	0x447a0000
 800124c:	200000c4 	.word	0x200000c4
 8001250:	200000c8 	.word	0x200000c8

08001254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PIDController_Init(&MPID);
 8001258:	481e      	ldr	r0, [pc, #120]	; (80012d4 <main+0x80>)
 800125a:	f7ff fda3 	bl	8000da4 <PIDController_Init>
	//MPID.Kp = 4.156;
	//MPID.Ki = 325.9;
	MPID.T = 0.01;
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <main+0x80>)
 8001260:	4a1d      	ldr	r2, [pc, #116]	; (80012d8 <main+0x84>)
 8001262:	621a      	str	r2, [r3, #32]
	MPID.limMax = 1000;
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <main+0x80>)
 8001266:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <main+0x88>)
 8001268:	615a      	str	r2, [r3, #20]
	MPID.limMin = -1000;
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <main+0x80>)
 800126c:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <main+0x8c>)
 800126e:	611a      	str	r2, [r3, #16]
	MPID.limMaxInt = 1000;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <main+0x80>)
 8001272:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <main+0x88>)
 8001274:	61da      	str	r2, [r3, #28]
	MPID.limMinInt = -1000;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <main+0x80>)
 8001278:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <main+0x8c>)
 800127a:	619a      	str	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127c:	f000 fbc8 	bl	8001a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001280:	f000 f83a 	bl	80012f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001284:	f7ff fe88 	bl	8000f98 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001288:	f000 f9be 	bl	8001608 <MX_TIM2_Init>
  MX_TIM3_Init();
 800128c:	f000 fa08 	bl	80016a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001290:	f000 fa88 	bl	80017a4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001294:	213c      	movs	r1, #60	; 0x3c
 8001296:	4813      	ldr	r0, [pc, #76]	; (80012e4 <main+0x90>)
 8001298:	f001 fd06 	bl	8002ca8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800129c:	4812      	ldr	r0, [pc, #72]	; (80012e8 <main+0x94>)
 800129e:	f001 fb15 	bl	80028cc <HAL_TIM_Base_Start_IT>


  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012a2:	2100      	movs	r1, #0
 80012a4:	4811      	ldr	r0, [pc, #68]	; (80012ec <main+0x98>)
 80012a6:	f001 fbbb 	bl	8002a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012aa:	2104      	movs	r1, #4
 80012ac:	480f      	ldr	r0, [pc, #60]	; (80012ec <main+0x98>)
 80012ae:	f001 fbb7 	bl	8002a20 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      printf("The value of counter is : %d \r\n", counter);
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <main+0x9c>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4619      	mov	r1, r3
 80012b8:	480e      	ldr	r0, [pc, #56]	; (80012f4 <main+0xa0>)
 80012ba:	f002 fc0f 	bl	8003adc <iprintf>
	  counter++;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <main+0x9c>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <main+0x9c>)
 80012c8:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(100);
 80012ca:	2064      	movs	r0, #100	; 0x64
 80012cc:	f000 fc02 	bl	8001ad4 <HAL_Delay>
      printf("The value of counter is : %d \r\n", counter);
 80012d0:	e7ef      	b.n	80012b2 <main+0x5e>
 80012d2:	bf00      	nop
 80012d4:	20000084 	.word	0x20000084
 80012d8:	3c23d70a 	.word	0x3c23d70a
 80012dc:	447a0000 	.word	0x447a0000
 80012e0:	c47a0000 	.word	0xc47a0000
 80012e4:	2000016c 	.word	0x2000016c
 80012e8:	200000dc 	.word	0x200000dc
 80012ec:	20000124 	.word	0x20000124
 80012f0:	200000d0 	.word	0x200000d0
 80012f4:	080047f0 	.word	0x080047f0

080012f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b090      	sub	sp, #64	; 0x40
 80012fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fe:	f107 0318 	add.w	r3, r7, #24
 8001302:	2228      	movs	r2, #40	; 0x28
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f002 fc3d 	bl	8003b86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800131a:	2301      	movs	r3, #1
 800131c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800131e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001322:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001328:	2301      	movs	r3, #1
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132c:	2302      	movs	r3, #2
 800132e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001334:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001336:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133c:	f107 0318 	add.w	r3, r7, #24
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fe95 	bl	8002070 <HAL_RCC_OscConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800134c:	f000 f85a 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001350:	230f      	movs	r3, #15
 8001352:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001354:	2302      	movs	r3, #2
 8001356:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001360:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2102      	movs	r1, #2
 800136a:	4618      	mov	r0, r3
 800136c:	f001 f902 	bl	8002574 <HAL_RCC_ClockConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001376:	f000 f845 	bl	8001404 <Error_Handler>
  }
}
 800137a:	bf00      	nop
 800137c:	3740      	adds	r7, #64	; 0x40
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b085      	sub	sp, #20
 8001388:	af02      	add	r7, sp, #8
 800138a:	6078      	str	r0, [r7, #4]
	if (htim->Instance==TIM2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001394:	d121      	bne.n	80013da <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		pwm=PIDController_Update(&MPID, 0.5, rdps, Kp, Ki, Kd);
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x68>)
 80013a6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80013aa:	4811      	ldr	r0, [pc, #68]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80013ac:	f7ff fd17 	bl	8000dde <PIDController_Update>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80013b4:	6013      	str	r3, [r2, #0]
		TIM3->CCR1 = 0;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = pwm;
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4c0d      	ldr	r4, [pc, #52]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fcce 	bl	8000d64 <__aeabi_f2uiz>
 80013c8:	4603      	mov	r3, r0
 80013ca:	63a3      	str	r3, [r4, #56]	; 0x38
		rdps=Motors_RP(20, N);
 80013cc:	490b      	ldr	r1, [pc, #44]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x78>)
 80013ce:	480c      	ldr	r0, [pc, #48]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80013d0:	f7ff fe7e 	bl	80010d0 <Motors_RP>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80013d8:	6013      	str	r3, [r2, #0]
	}
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200000c8 	.word	0x200000c8
 80013e8:	4422f333 	.word	0x4422f333
 80013ec:	410afdf4 	.word	0x410afdf4
 80013f0:	20000084 	.word	0x20000084
 80013f4:	200000d4 	.word	0x200000d4
 80013f8:	40000400 	.word	0x40000400
 80013fc:	44a28000 	.word	0x44a28000
 8001400:	41a00000 	.word	0x41a00000

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	e7fe      	b.n	800140c <Error_Handler+0x8>
	...

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_MspInit+0x6c>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	4a18      	ldr	r2, [pc, #96]	; (800147c <HAL_MspInit+0x6c>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6193      	str	r3, [r2, #24]
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_MspInit+0x6c>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_MspInit+0x6c>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <HAL_MspInit+0x6c>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	61d3      	str	r3, [r2, #28]
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_MspInit+0x6c>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2005      	movs	r0, #5
 800144c:	f000 fc3d 	bl	8001cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001450:	2005      	movs	r0, #5
 8001452:	f000 fc56 	bl	8001d02 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_MspInit+0x70>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_MspInit+0x70>)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000
 8001480:	40010000 	.word	0x40010000

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ca:	f000 fae7 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
	...

080014e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <TIM2_IRQHandler+0x10>)
 80014e6:	f001 fc6d 	bl	8002dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200000dc 	.word	0x200000dc

080014f4 <_read>:
	// write tom ITM port0
	ITM_STIMULUS_PORT0 = ch;
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e00a      	b.n	800151c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001506:	f3af 8000 	nop.w
 800150a:	4601      	mov	r1, r0
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	60ba      	str	r2, [r7, #8]
 8001512:	b2ca      	uxtb	r2, r1
 8001514:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	dbf0      	blt.n	8001506 <_read+0x12>
  }

  return len;
 8001524:	687b      	ldr	r3, [r7, #4]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_close>:
  }
  return len;
}

int _close(int file)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001554:	605a      	str	r2, [r3, #4]
  return 0;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <_isatty>:

int _isatty(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001576:	b480      	push	{r7}
 8001578:	b085      	sub	sp, #20
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
	...

08001590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <_sbrk+0x5c>)
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <_sbrk+0x60>)
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <_sbrk+0x64>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <_sbrk+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d207      	bcs.n	80015d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c0:	f002 fb30 	bl	8003c24 <__errno>
 80015c4:	4603      	mov	r3, r0
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e009      	b.n	80015e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <_sbrk+0x64>)
 80015e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20005000 	.word	0x20005000
 80015f0:	00000400 	.word	0x00000400
 80015f4:	200000d8 	.word	0x200000d8
 80015f8:	20000308 	.word	0x20000308

080015fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	463b      	mov	r3, r7
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <MX_TIM2_Init+0x94>)
 8001626:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800162a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MX_TIM2_Init+0x94>)
 800162e:	2247      	movs	r2, #71	; 0x47
 8001630:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <MX_TIM2_Init+0x94>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <MX_TIM2_Init+0x94>)
 800163a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800163e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <MX_TIM2_Init+0x94>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <MX_TIM2_Init+0x94>)
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800164c:	4813      	ldr	r0, [pc, #76]	; (800169c <MX_TIM2_Init+0x94>)
 800164e:	f001 f8ed 	bl	800282c <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001658:	f7ff fed4 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	4619      	mov	r1, r3
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <MX_TIM2_Init+0x94>)
 800166a:	f001 fd75 	bl	8003158 <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001674:	f7ff fec6 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001680:	463b      	mov	r3, r7
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_TIM2_Init+0x94>)
 8001686:	f002 f8f7 	bl	8003878 <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001690:	f7ff feb8 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200000dc 	.word	0x200000dc

080016a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	; 0x38
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	f107 0320 	add.w	r3, r7, #32
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016d0:	4b32      	ldr	r3, [pc, #200]	; (800179c <MX_TIM3_Init+0xfc>)
 80016d2:	4a33      	ldr	r2, [pc, #204]	; (80017a0 <MX_TIM3_Init+0x100>)
 80016d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 80016d6:	4b31      	ldr	r3, [pc, #196]	; (800179c <MX_TIM3_Init+0xfc>)
 80016d8:	2209      	movs	r2, #9
 80016da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016dc:	4b2f      	ldr	r3, [pc, #188]	; (800179c <MX_TIM3_Init+0xfc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 410;
 80016e2:	4b2e      	ldr	r3, [pc, #184]	; (800179c <MX_TIM3_Init+0xfc>)
 80016e4:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 80016e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <MX_TIM3_Init+0xfc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <MX_TIM3_Init+0xfc>)
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016f6:	4829      	ldr	r0, [pc, #164]	; (800179c <MX_TIM3_Init+0xfc>)
 80016f8:	f001 f898 	bl	800282c <HAL_TIM_Base_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001702:	f7ff fe7f 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800170c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001710:	4619      	mov	r1, r3
 8001712:	4822      	ldr	r0, [pc, #136]	; (800179c <MX_TIM3_Init+0xfc>)
 8001714:	f001 fd20 	bl	8003158 <HAL_TIM_ConfigClockSource>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800171e:	f7ff fe71 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001722:	481e      	ldr	r0, [pc, #120]	; (800179c <MX_TIM3_Init+0xfc>)
 8001724:	f001 f924 	bl	8002970 <HAL_TIM_PWM_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800172e:	f7ff fe69 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	4619      	mov	r1, r3
 8001740:	4816      	ldr	r0, [pc, #88]	; (800179c <MX_TIM3_Init+0xfc>)
 8001742:	f002 f899 	bl	8003878 <HAL_TIMEx_MasterConfigSynchronization>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800174c:	f7ff fe5a 	bl	8001404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001750:	2360      	movs	r3, #96	; 0x60
 8001752:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	4619      	mov	r1, r3
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <MX_TIM3_Init+0xfc>)
 8001768:	f001 fc34 	bl	8002fd4 <HAL_TIM_PWM_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001772:	f7ff fe47 	bl	8001404 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2204      	movs	r2, #4
 800177a:	4619      	mov	r1, r3
 800177c:	4807      	ldr	r0, [pc, #28]	; (800179c <MX_TIM3_Init+0xfc>)
 800177e:	f001 fc29 	bl	8002fd4 <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001788:	f7ff fe3c 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800178c:	4803      	ldr	r0, [pc, #12]	; (800179c <MX_TIM3_Init+0xfc>)
 800178e:	f000 f8d3 	bl	8001938 <HAL_TIM_MspPostInit>

}
 8001792:	bf00      	nop
 8001794:	3738      	adds	r7, #56	; 0x38
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000124 	.word	0x20000124
 80017a0:	40000400 	.word	0x40000400

080017a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	; 0x30
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	2224      	movs	r2, #36	; 0x24
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 f9e7 	bl	8003b86 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017c0:	4b20      	ldr	r3, [pc, #128]	; (8001844 <MX_TIM4_Init+0xa0>)
 80017c2:	4a21      	ldr	r2, [pc, #132]	; (8001848 <MX_TIM4_Init+0xa4>)
 80017c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017c6:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <MX_TIM4_Init+0xa0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <MX_TIM4_Init+0xa0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <MX_TIM4_Init+0xa0>)
 80017d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_TIM4_Init+0xa0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_TIM4_Init+0xa0>)
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017e6:	2303      	movs	r3, #3
 80017e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017ee:	2301      	movs	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80017f6:	230a      	movs	r3, #10
 80017f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017fe:	2301      	movs	r3, #1
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	4619      	mov	r1, r3
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <MX_TIM4_Init+0xa0>)
 8001812:	f001 f9a7 	bl	8002b64 <HAL_TIM_Encoder_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800181c:	f7ff fdf2 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_TIM4_Init+0xa0>)
 800182e:	f002 f823 	bl	8003878 <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001838:	f7ff fde4 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	3730      	adds	r7, #48	; 0x30
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000016c 	.word	0x2000016c
 8001848:	40000800 	.word	0x40000800

0800184c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800185c:	d114      	bne.n	8001888 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_TIM_Base_MspInit+0x68>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <HAL_TIM_Base_MspInit+0x68>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_TIM_Base_MspInit+0x68>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	201c      	movs	r0, #28
 800187c:	f000 fa25 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001880:	201c      	movs	r0, #28
 8001882:	f000 fa3e 	bl	8001d02 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001886:	e010      	b.n	80018aa <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_TIM_Base_MspInit+0x6c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d10b      	bne.n	80018aa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <HAL_TIM_Base_MspInit+0x68>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <HAL_TIM_Base_MspInit+0x68>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	61d3      	str	r3, [r2, #28]
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_TIM_Base_MspInit+0x68>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40000400 	.word	0x40000400

080018bc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a15      	ldr	r2, [pc, #84]	; (800192c <HAL_TIM_Encoder_MspInit+0x70>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d123      	bne.n	8001924 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_TIM_Encoder_MspInit+0x74>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	4a13      	ldr	r2, [pc, #76]	; (8001930 <HAL_TIM_Encoder_MspInit+0x74>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	61d3      	str	r3, [r2, #28]
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_TIM_Encoder_MspInit+0x74>)
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_TIM_Encoder_MspInit+0x74>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <HAL_TIM_Encoder_MspInit+0x74>)
 80018fa:	f043 0308 	orr.w	r3, r3, #8
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_TIM_Encoder_MspInit+0x74>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800190c:	23c0      	movs	r3, #192	; 0xc0
 800190e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	4619      	mov	r1, r3
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <HAL_TIM_Encoder_MspInit+0x78>)
 8001920:	f000 fa0a 	bl	8001d38 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001924:	bf00      	nop
 8001926:	3720      	adds	r7, #32
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40000800 	.word	0x40000800
 8001930:	40021000 	.word	0x40021000
 8001934:	40010c00 	.word	0x40010c00

08001938 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <HAL_TIM_MspPostInit+0x7c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d129      	bne.n	80019ac <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_TIM_MspPostInit+0x80>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a16      	ldr	r2, [pc, #88]	; (80019b8 <HAL_TIM_MspPostInit+0x80>)
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_TIM_MspPostInit+0x80>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001970:	2330      	movs	r3, #48	; 0x30
 8001972:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2302      	movs	r3, #2
 800197a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	4619      	mov	r1, r3
 8001982:	480e      	ldr	r0, [pc, #56]	; (80019bc <HAL_TIM_MspPostInit+0x84>)
 8001984:	f000 f9d8 	bl	8001d38 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_TIM_MspPostInit+0x88>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <HAL_TIM_MspPostInit+0x88>)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40000400 	.word	0x40000400
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010c00 	.word	0x40010c00
 80019c0:	40010000 	.word	0x40010000

080019c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c4:	f7ff fe1a 	bl	80015fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c8:	480b      	ldr	r0, [pc, #44]	; (80019f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019ca:	490c      	ldr	r1, [pc, #48]	; (80019fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019cc:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019e0:	4c09      	ldr	r4, [pc, #36]	; (8001a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ee:	f002 f91f 	bl	8003c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019f2:	f7ff fc2f 	bl	8001254 <main>
  bx lr
 80019f6:	4770      	bx	lr
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a00:	08004870 	.word	0x08004870
  ldr r2, =_sbss
 8001a04:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a08:	20000304 	.word	0x20000304

08001a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC1_2_IRQHandler>
	...

08001a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_Init+0x28>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <HAL_Init+0x28>)
 8001a1a:	f043 0310 	orr.w	r3, r3, #16
 8001a1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f000 f947 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a26:	200f      	movs	r0, #15
 8001a28:	f000 f808 	bl	8001a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a2c:	f7ff fcf0 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40022000 	.word	0x40022000

08001a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_InitTick+0x54>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_InitTick+0x58>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f95f 	bl	8001d1e <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00e      	b.n	8001a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b0f      	cmp	r3, #15
 8001a6e:	d80a      	bhi.n	8001a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a70:	2200      	movs	r2, #0
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f000 f927 	bl	8001cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_InitTick+0x5c>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e000      	b.n	8001a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_IncTick+0x1c>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_IncTick+0x20>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_IncTick+0x20>)
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	200001b4 	.word	0x200001b4

08001ac0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <HAL_GetTick+0x10>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	200001b4 	.word	0x200001b4

08001ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff fff0 	bl	8001ac0 <HAL_GetTick>
 8001ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d005      	beq.n	8001afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_Delay+0x44>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001afa:	bf00      	nop
 8001afc:	f7ff ffe0 	bl	8001ac0 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d8f7      	bhi.n	8001afc <HAL_Delay+0x28>
  {
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000008 	.word	0x20000008

08001b1c <__NVIC_SetPriorityGrouping>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_GetPriorityGrouping>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_EnableIRQ>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	4906      	ldr	r1, [pc, #24]	; (8001bb4 <__NVIC_EnableIRQ+0x34>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_SetPriority>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <SysTick_Config>:
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c80:	d301      	bcc.n	8001c86 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00f      	b.n	8001ca6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <SysTick_Config+0x40>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f7ff ff90 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <SysTick_Config+0x40>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <SysTick_Config+0x40>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff2d 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cdc:	f7ff ff42 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	f7ff ff90 	bl	8001c0c <NVIC_EncodePriority>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff5f 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff35 	bl	8001b80 <__NVIC_EnableIRQ>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffa2 	bl	8001c70 <SysTick_Config>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b08b      	sub	sp, #44	; 0x2c
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d42:	2300      	movs	r3, #0
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4a:	e169      	b.n	8002020 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	f040 8158 	bne.w	800201a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4a9a      	ldr	r2, [pc, #616]	; (8001fd8 <HAL_GPIO_Init+0x2a0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d05e      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d74:	4a98      	ldr	r2, [pc, #608]	; (8001fd8 <HAL_GPIO_Init+0x2a0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d875      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d7a:	4a98      	ldr	r2, [pc, #608]	; (8001fdc <HAL_GPIO_Init+0x2a4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d058      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d80:	4a96      	ldr	r2, [pc, #600]	; (8001fdc <HAL_GPIO_Init+0x2a4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d86f      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d86:	4a96      	ldr	r2, [pc, #600]	; (8001fe0 <HAL_GPIO_Init+0x2a8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d052      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d8c:	4a94      	ldr	r2, [pc, #592]	; (8001fe0 <HAL_GPIO_Init+0x2a8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d869      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d92:	4a94      	ldr	r2, [pc, #592]	; (8001fe4 <HAL_GPIO_Init+0x2ac>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d04c      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d98:	4a92      	ldr	r2, [pc, #584]	; (8001fe4 <HAL_GPIO_Init+0x2ac>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d863      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d9e:	4a92      	ldr	r2, [pc, #584]	; (8001fe8 <HAL_GPIO_Init+0x2b0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d046      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001da4:	4a90      	ldr	r2, [pc, #576]	; (8001fe8 <HAL_GPIO_Init+0x2b0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d85d      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	d82a      	bhi.n	8001e04 <HAL_GPIO_Init+0xcc>
 8001dae:	2b12      	cmp	r3, #18
 8001db0:	d859      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001db2:	a201      	add	r2, pc, #4	; (adr r2, 8001db8 <HAL_GPIO_Init+0x80>)
 8001db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db8:	08001e33 	.word	0x08001e33
 8001dbc:	08001e0d 	.word	0x08001e0d
 8001dc0:	08001e1f 	.word	0x08001e1f
 8001dc4:	08001e61 	.word	0x08001e61
 8001dc8:	08001e67 	.word	0x08001e67
 8001dcc:	08001e67 	.word	0x08001e67
 8001dd0:	08001e67 	.word	0x08001e67
 8001dd4:	08001e67 	.word	0x08001e67
 8001dd8:	08001e67 	.word	0x08001e67
 8001ddc:	08001e67 	.word	0x08001e67
 8001de0:	08001e67 	.word	0x08001e67
 8001de4:	08001e67 	.word	0x08001e67
 8001de8:	08001e67 	.word	0x08001e67
 8001dec:	08001e67 	.word	0x08001e67
 8001df0:	08001e67 	.word	0x08001e67
 8001df4:	08001e67 	.word	0x08001e67
 8001df8:	08001e67 	.word	0x08001e67
 8001dfc:	08001e15 	.word	0x08001e15
 8001e00:	08001e29 	.word	0x08001e29
 8001e04:	4a79      	ldr	r2, [pc, #484]	; (8001fec <HAL_GPIO_Init+0x2b4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e0a:	e02c      	b.n	8001e66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	623b      	str	r3, [r7, #32]
          break;
 8001e12:	e029      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	623b      	str	r3, [r7, #32]
          break;
 8001e1c:	e024      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	3308      	adds	r3, #8
 8001e24:	623b      	str	r3, [r7, #32]
          break;
 8001e26:	e01f      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	330c      	adds	r3, #12
 8001e2e:	623b      	str	r3, [r7, #32]
          break;
 8001e30:	e01a      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d102      	bne.n	8001e40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	623b      	str	r3, [r7, #32]
          break;
 8001e3e:	e013      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	611a      	str	r2, [r3, #16]
          break;
 8001e52:	e009      	b.n	8001e68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e54:	2308      	movs	r3, #8
 8001e56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	615a      	str	r2, [r3, #20]
          break;
 8001e5e:	e003      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
          break;
 8001e64:	e000      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          break;
 8001e66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2bff      	cmp	r3, #255	; 0xff
 8001e6c:	d801      	bhi.n	8001e72 <HAL_GPIO_Init+0x13a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	e001      	b.n	8001e76 <HAL_GPIO_Init+0x13e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3304      	adds	r3, #4
 8001e76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2bff      	cmp	r3, #255	; 0xff
 8001e7c:	d802      	bhi.n	8001e84 <HAL_GPIO_Init+0x14c>
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	e002      	b.n	8001e8a <HAL_GPIO_Init+0x152>
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	3b08      	subs	r3, #8
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	210f      	movs	r1, #15
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	6a39      	ldr	r1, [r7, #32]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 80b1 	beq.w	800201a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb8:	4b4d      	ldr	r3, [pc, #308]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a4c      	ldr	r2, [pc, #304]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6193      	str	r3, [r2, #24]
 8001ec4:	4b4a      	ldr	r3, [pc, #296]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ed0:	4a48      	ldr	r2, [pc, #288]	; (8001ff4 <HAL_GPIO_Init+0x2bc>)
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001edc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a40      	ldr	r2, [pc, #256]	; (8001ff8 <HAL_GPIO_Init+0x2c0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d013      	beq.n	8001f24 <HAL_GPIO_Init+0x1ec>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a3f      	ldr	r2, [pc, #252]	; (8001ffc <HAL_GPIO_Init+0x2c4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00d      	beq.n	8001f20 <HAL_GPIO_Init+0x1e8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3e      	ldr	r2, [pc, #248]	; (8002000 <HAL_GPIO_Init+0x2c8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d007      	beq.n	8001f1c <HAL_GPIO_Init+0x1e4>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3d      	ldr	r2, [pc, #244]	; (8002004 <HAL_GPIO_Init+0x2cc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d101      	bne.n	8001f18 <HAL_GPIO_Init+0x1e0>
 8001f14:	2303      	movs	r3, #3
 8001f16:	e006      	b.n	8001f26 <HAL_GPIO_Init+0x1ee>
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e004      	b.n	8001f26 <HAL_GPIO_Init+0x1ee>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e002      	b.n	8001f26 <HAL_GPIO_Init+0x1ee>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_GPIO_Init+0x1ee>
 8001f24:	2300      	movs	r3, #0
 8001f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f28:	f002 0203 	and.w	r2, r2, #3
 8001f2c:	0092      	lsls	r2, r2, #2
 8001f2e:	4093      	lsls	r3, r2
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f36:	492f      	ldr	r1, [pc, #188]	; (8001ff4 <HAL_GPIO_Init+0x2bc>)
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f50:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	492c      	ldr	r1, [pc, #176]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f5e:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4928      	ldr	r1, [pc, #160]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f78:	4b23      	ldr	r3, [pc, #140]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	4922      	ldr	r1, [pc, #136]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60cb      	str	r3, [r1, #12]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	491e      	ldr	r1, [pc, #120]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	4918      	ldr	r1, [pc, #96]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	4914      	ldr	r1, [pc, #80]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d021      	beq.n	800200c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	490e      	ldr	r1, [pc, #56]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e021      	b.n	800201a <HAL_GPIO_Init+0x2e2>
 8001fd6:	bf00      	nop
 8001fd8:	10320000 	.word	0x10320000
 8001fdc:	10310000 	.word	0x10310000
 8001fe0:	10220000 	.word	0x10220000
 8001fe4:	10210000 	.word	0x10210000
 8001fe8:	10120000 	.word	0x10120000
 8001fec:	10110000 	.word	0x10110000
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	40010800 	.word	0x40010800
 8001ffc:	40010c00 	.word	0x40010c00
 8002000:	40011000 	.word	0x40011000
 8002004:	40011400 	.word	0x40011400
 8002008:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_GPIO_Init+0x304>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	43db      	mvns	r3, r3
 8002014:	4909      	ldr	r1, [pc, #36]	; (800203c <HAL_GPIO_Init+0x304>)
 8002016:	4013      	ands	r3, r2
 8002018:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	3301      	adds	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	f47f ae8e 	bne.w	8001d4c <HAL_GPIO_Init+0x14>
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	372c      	adds	r7, #44	; 0x2c
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	40010400 	.word	0x40010400

08002040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	807b      	strh	r3, [r7, #2]
 800204c:	4613      	mov	r3, r2
 800204e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002050:	787b      	ldrb	r3, [r7, #1]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800205c:	e003      	b.n	8002066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800205e:	887b      	ldrh	r3, [r7, #2]
 8002060:	041a      	lsls	r2, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	611a      	str	r2, [r3, #16]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e272      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8087 	beq.w	800219e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002090:	4b92      	ldr	r3, [pc, #584]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b04      	cmp	r3, #4
 800209a:	d00c      	beq.n	80020b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800209c:	4b8f      	ldr	r3, [pc, #572]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d112      	bne.n	80020ce <HAL_RCC_OscConfig+0x5e>
 80020a8:	4b8c      	ldr	r3, [pc, #560]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b4:	d10b      	bne.n	80020ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b6:	4b89      	ldr	r3, [pc, #548]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d06c      	beq.n	800219c <HAL_RCC_OscConfig+0x12c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d168      	bne.n	800219c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e24c      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x76>
 80020d8:	4b80      	ldr	r3, [pc, #512]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a7f      	ldr	r2, [pc, #508]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	e02e      	b.n	8002144 <HAL_RCC_OscConfig+0xd4>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x98>
 80020ee:	4b7b      	ldr	r3, [pc, #492]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a7a      	ldr	r2, [pc, #488]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b78      	ldr	r3, [pc, #480]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a77      	ldr	r2, [pc, #476]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e01d      	b.n	8002144 <HAL_RCC_OscConfig+0xd4>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0xbc>
 8002112:	4b72      	ldr	r3, [pc, #456]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a71      	ldr	r2, [pc, #452]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b6f      	ldr	r3, [pc, #444]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a6e      	ldr	r2, [pc, #440]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0xd4>
 800212c:	4b6b      	ldr	r3, [pc, #428]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a6a      	ldr	r2, [pc, #424]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b68      	ldr	r3, [pc, #416]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a67      	ldr	r2, [pc, #412]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800213e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002142:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d013      	beq.n	8002174 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff fcb8 	bl	8001ac0 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002154:	f7ff fcb4 	bl	8001ac0 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	; 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e200      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	4b5d      	ldr	r3, [pc, #372]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0xe4>
 8002172:	e014      	b.n	800219e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff fca4 	bl	8001ac0 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff fca0 	bl	8001ac0 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e1ec      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218e:	4b53      	ldr	r3, [pc, #332]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x10c>
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d063      	beq.n	8002272 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021aa:	4b4c      	ldr	r3, [pc, #304]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00b      	beq.n	80021ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021b6:	4b49      	ldr	r3, [pc, #292]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d11c      	bne.n	80021fc <HAL_RCC_OscConfig+0x18c>
 80021c2:	4b46      	ldr	r3, [pc, #280]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d116      	bne.n	80021fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ce:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <HAL_RCC_OscConfig+0x176>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e1c0      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e6:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4939      	ldr	r1, [pc, #228]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fa:	e03a      	b.n	8002272 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d020      	beq.n	8002246 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002204:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7ff fc59 	bl	8001ac0 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002212:	f7ff fc55 	bl	8001ac0 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e1a1      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002224:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002230:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4927      	ldr	r1, [pc, #156]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]
 8002244:	e015      	b.n	8002272 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002246:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fc38 	bl	8001ac0 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002254:	f7ff fc34 	bl	8001ac0 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e180      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002266:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d03a      	beq.n	80022f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d019      	beq.n	80022ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228c:	f7ff fc18 	bl	8001ac0 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002294:	f7ff fc14 	bl	8001ac0 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e160      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a6:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022b2:	2001      	movs	r0, #1
 80022b4:	f000 fa9c 	bl	80027f0 <RCC_Delay>
 80022b8:	e01c      	b.n	80022f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7ff fbfe 	bl	8001ac0 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c6:	e00f      	b.n	80022e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c8:	f7ff fbfa 	bl	8001ac0 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d908      	bls.n	80022e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e146      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
 80022e0:	42420000 	.word	0x42420000
 80022e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	4b92      	ldr	r3, [pc, #584]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e9      	bne.n	80022c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80a6 	beq.w	800244e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002306:	4b8b      	ldr	r3, [pc, #556]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10d      	bne.n	800232e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002312:	4b88      	ldr	r3, [pc, #544]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4a87      	ldr	r2, [pc, #540]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231c:	61d3      	str	r3, [r2, #28]
 800231e:	4b85      	ldr	r3, [pc, #532]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232a:	2301      	movs	r3, #1
 800232c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232e:	4b82      	ldr	r3, [pc, #520]	; (8002538 <HAL_RCC_OscConfig+0x4c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d118      	bne.n	800236c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233a:	4b7f      	ldr	r3, [pc, #508]	; (8002538 <HAL_RCC_OscConfig+0x4c8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7e      	ldr	r2, [pc, #504]	; (8002538 <HAL_RCC_OscConfig+0x4c8>)
 8002340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002346:	f7ff fbbb 	bl	8001ac0 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234e:	f7ff fbb7 	bl	8001ac0 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b64      	cmp	r3, #100	; 0x64
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e103      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4b75      	ldr	r3, [pc, #468]	; (8002538 <HAL_RCC_OscConfig+0x4c8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x312>
 8002374:	4b6f      	ldr	r3, [pc, #444]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4a6e      	ldr	r2, [pc, #440]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6213      	str	r3, [r2, #32]
 8002380:	e02d      	b.n	80023de <HAL_RCC_OscConfig+0x36e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x334>
 800238a:	4b6a      	ldr	r3, [pc, #424]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a69      	ldr	r2, [pc, #420]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	6213      	str	r3, [r2, #32]
 8002396:	4b67      	ldr	r3, [pc, #412]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4a66      	ldr	r2, [pc, #408]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f023 0304 	bic.w	r3, r3, #4
 80023a0:	6213      	str	r3, [r2, #32]
 80023a2:	e01c      	b.n	80023de <HAL_RCC_OscConfig+0x36e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b05      	cmp	r3, #5
 80023aa:	d10c      	bne.n	80023c6 <HAL_RCC_OscConfig+0x356>
 80023ac:	4b61      	ldr	r3, [pc, #388]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a60      	ldr	r2, [pc, #384]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	6213      	str	r3, [r2, #32]
 80023b8:	4b5e      	ldr	r3, [pc, #376]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4a5d      	ldr	r2, [pc, #372]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	e00b      	b.n	80023de <HAL_RCC_OscConfig+0x36e>
 80023c6:	4b5b      	ldr	r3, [pc, #364]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a5a      	ldr	r2, [pc, #360]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	4b58      	ldr	r3, [pc, #352]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a57      	ldr	r2, [pc, #348]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	f023 0304 	bic.w	r3, r3, #4
 80023dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d015      	beq.n	8002412 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e6:	f7ff fb6b 	bl	8001ac0 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ee:	f7ff fb67 	bl	8001ac0 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e0b1      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002404:	4b4b      	ldr	r3, [pc, #300]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0ee      	beq.n	80023ee <HAL_RCC_OscConfig+0x37e>
 8002410:	e014      	b.n	800243c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002412:	f7ff fb55 	bl	8001ac0 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7ff fb51 	bl	8001ac0 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	; 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e09b      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002430:	4b40      	ldr	r3, [pc, #256]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1ee      	bne.n	800241a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800243c:	7dfb      	ldrb	r3, [r7, #23]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d105      	bne.n	800244e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002442:	4b3c      	ldr	r3, [pc, #240]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4a3b      	ldr	r2, [pc, #236]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8087 	beq.w	8002566 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002458:	4b36      	ldr	r3, [pc, #216]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b08      	cmp	r3, #8
 8002462:	d061      	beq.n	8002528 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d146      	bne.n	80024fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246c:	4b33      	ldr	r3, [pc, #204]	; (800253c <HAL_RCC_OscConfig+0x4cc>)
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7ff fb25 	bl	8001ac0 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247a:	f7ff fb21 	bl	8001ac0 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e06d      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f0      	bne.n	800247a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a0:	d108      	bne.n	80024b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4921      	ldr	r1, [pc, #132]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a19      	ldr	r1, [r3, #32]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	430b      	orrs	r3, r1
 80024c6:	491b      	ldr	r1, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_RCC_OscConfig+0x4cc>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7ff faf5 	bl	8001ac0 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7ff faf1 	bl	8001ac0 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e03d      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x46a>
 80024f8:	e035      	b.n	8002566 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_RCC_OscConfig+0x4cc>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff fade 	bl	8001ac0 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7ff fada 	bl	8001ac0 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e026      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x498>
 8002526:	e01e      	b.n	8002566 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d107      	bne.n	8002540 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e019      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
 8002534:	40021000 	.word	0x40021000
 8002538:	40007000 	.word	0x40007000
 800253c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_OscConfig+0x500>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	429a      	cmp	r2, r3
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000

08002574 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0d0      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002588:	4b6a      	ldr	r3, [pc, #424]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d910      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b67      	ldr	r3, [pc, #412]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 0207 	bic.w	r2, r3, #7
 800259e:	4965      	ldr	r1, [pc, #404]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0b8      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d0:	4b59      	ldr	r3, [pc, #356]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a58      	ldr	r2, [pc, #352]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f4:	4b50      	ldr	r3, [pc, #320]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	494d      	ldr	r1, [pc, #308]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d040      	beq.n	8002694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d115      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e07f      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	4b41      	ldr	r3, [pc, #260]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e073      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002642:	4b3d      	ldr	r3, [pc, #244]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e06b      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002652:	4b39      	ldr	r3, [pc, #228]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f023 0203 	bic.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4936      	ldr	r1, [pc, #216]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002664:	f7ff fa2c 	bl	8001ac0 <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	e00a      	b.n	8002682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266c:	f7ff fa28 	bl	8001ac0 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e053      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 020c 	and.w	r2, r3, #12
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	429a      	cmp	r2, r3
 8002692:	d1eb      	bne.n	800266c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d210      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 0207 	bic.w	r2, r3, #7
 80026aa:	4922      	ldr	r1, [pc, #136]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e032      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4916      	ldr	r1, [pc, #88]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	490e      	ldr	r1, [pc, #56]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002702:	f000 f821 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8002706:	4602      	mov	r2, r0
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	490a      	ldr	r1, [pc, #40]	; (800273c <HAL_RCC_ClockConfig+0x1c8>)
 8002714:	5ccb      	ldrb	r3, [r1, r3]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x1cc>)
 800271c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1d0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff f98a 	bl	8001a3c <HAL_InitTick>

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40022000 	.word	0x40022000
 8002738:	40021000 	.word	0x40021000
 800273c:	08004810 	.word	0x08004810
 8002740:	20000000 	.word	0x20000000
 8002744:	20000004 	.word	0x20000004

08002748 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002762:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b04      	cmp	r3, #4
 8002770:	d002      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0x30>
 8002772:	2b08      	cmp	r3, #8
 8002774:	d003      	beq.n	800277e <HAL_RCC_GetSysClockFreq+0x36>
 8002776:	e027      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800277a:	613b      	str	r3, [r7, #16]
      break;
 800277c:	e027      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	0c9b      	lsrs	r3, r3, #18
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	4a17      	ldr	r2, [pc, #92]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002788:	5cd3      	ldrb	r3, [r2, r3]
 800278a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d010      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002796:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	0c5b      	lsrs	r3, r3, #17
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027a2:	5cd3      	ldrb	r3, [r2, r3]
 80027a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a0d      	ldr	r2, [pc, #52]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80027aa:	fb03 f202 	mul.w	r2, r3, r2
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	e004      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80027bc:	fb02 f303 	mul.w	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	613b      	str	r3, [r7, #16]
      break;
 80027c6:	e002      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ca:	613b      	str	r3, [r7, #16]
      break;
 80027cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ce:	693b      	ldr	r3, [r7, #16]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
 80027e0:	007a1200 	.word	0x007a1200
 80027e4:	08004820 	.word	0x08004820
 80027e8:	08004830 	.word	0x08004830
 80027ec:	003d0900 	.word	0x003d0900

080027f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <RCC_Delay+0x34>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <RCC_Delay+0x38>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	0a5b      	lsrs	r3, r3, #9
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800280c:	bf00      	nop
  }
  while (Delay --);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1e5a      	subs	r2, r3, #1
 8002812:	60fa      	str	r2, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f9      	bne.n	800280c <RCC_Delay+0x1c>
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	20000000 	.word	0x20000000
 8002828:	10624dd3 	.word	0x10624dd3

0800282c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e041      	b.n	80028c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe fffa 	bl	800184c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f000 fd60 	bl	8003330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d001      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e03a      	b.n	800295a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a18      	ldr	r2, [pc, #96]	; (8002964 <HAL_TIM_Base_Start_IT+0x98>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00e      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x58>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290e:	d009      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x58>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a14      	ldr	r2, [pc, #80]	; (8002968 <HAL_TIM_Base_Start_IT+0x9c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d004      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x58>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a13      	ldr	r2, [pc, #76]	; (800296c <HAL_TIM_Base_Start_IT+0xa0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d111      	bne.n	8002948 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b06      	cmp	r3, #6
 8002934:	d010      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002946:	e007      	b.n	8002958 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	40012c00 	.word	0x40012c00
 8002968:	40000400 	.word	0x40000400
 800296c:	40000800 	.word	0x40000800

08002970 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e041      	b.n	8002a06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f839 	bl	8002a0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3304      	adds	r3, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4610      	mov	r0, r2
 80029b0:	f000 fcbe 	bl	8003330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_TIM_PWM_Start+0x24>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	bf14      	ite	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	2300      	moveq	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e022      	b.n	8002a8a <HAL_TIM_PWM_Start+0x6a>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d109      	bne.n	8002a5e <HAL_TIM_PWM_Start+0x3e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	bf14      	ite	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	2300      	moveq	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	e015      	b.n	8002a8a <HAL_TIM_PWM_Start+0x6a>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d109      	bne.n	8002a78 <HAL_TIM_PWM_Start+0x58>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e008      	b.n	8002a8a <HAL_TIM_PWM_Start+0x6a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e05e      	b.n	8002b50 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0x82>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa0:	e013      	b.n	8002aca <HAL_TIM_PWM_Start+0xaa>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d104      	bne.n	8002ab2 <HAL_TIM_PWM_Start+0x92>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab0:	e00b      	b.n	8002aca <HAL_TIM_PWM_Start+0xaa>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d104      	bne.n	8002ac2 <HAL_TIM_PWM_Start+0xa2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac0:	e003      	b.n	8002aca <HAL_TIM_PWM_Start+0xaa>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	6839      	ldr	r1, [r7, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 feac 	bl	8003830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <HAL_TIM_PWM_Start+0x138>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d107      	bne.n	8002af2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <HAL_TIM_PWM_Start+0x138>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00e      	beq.n	8002b1a <HAL_TIM_PWM_Start+0xfa>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b04:	d009      	beq.n	8002b1a <HAL_TIM_PWM_Start+0xfa>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <HAL_TIM_PWM_Start+0x13c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <HAL_TIM_PWM_Start+0xfa>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a12      	ldr	r2, [pc, #72]	; (8002b60 <HAL_TIM_PWM_Start+0x140>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d111      	bne.n	8002b3e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b06      	cmp	r3, #6
 8002b2a:	d010      	beq.n	8002b4e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3c:	e007      	b.n	8002b4e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800

08002b64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e093      	b.n	8002ca0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d106      	bne.n	8002b92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7fe fe95 	bl	80018bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ba8:	f023 0307 	bic.w	r3, r3, #7
 8002bac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f000 fbb9 	bl	8003330 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be6:	f023 0303 	bic.w	r3, r3, #3
 8002bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c04:	f023 030c 	bic.w	r3, r3, #12
 8002c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	4313      	orrs	r3, r2
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	011a      	lsls	r2, r3, #4
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	031b      	lsls	r3, r3, #12
 8002c34:	4313      	orrs	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002c42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cb8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cc0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cc8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cd0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d110      	bne.n	8002cfa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d102      	bne.n	8002ce4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cde:	7b7b      	ldrb	r3, [r7, #13]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d001      	beq.n	8002ce8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e069      	b.n	8002dbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf8:	e031      	b.n	8002d5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d110      	bne.n	8002d22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d00:	7bbb      	ldrb	r3, [r7, #14]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d102      	bne.n	8002d0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d06:	7b3b      	ldrb	r3, [r7, #12]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d001      	beq.n	8002d10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e055      	b.n	8002dbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d20:	e01d      	b.n	8002d5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d108      	bne.n	8002d3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d28:	7bbb      	ldrb	r3, [r7, #14]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d105      	bne.n	8002d3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d2e:	7b7b      	ldrb	r3, [r7, #13]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d102      	bne.n	8002d3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d34:	7b3b      	ldrb	r3, [r7, #12]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d001      	beq.n	8002d3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e03e      	b.n	8002dbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2202      	movs	r2, #2
 8002d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_TIM_Encoder_Start+0xc4>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d008      	beq.n	8002d7c <HAL_TIM_Encoder_Start+0xd4>
 8002d6a:	e00f      	b.n	8002d8c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2201      	movs	r2, #1
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fd5b 	bl	8003830 <TIM_CCxChannelCmd>
      break;
 8002d7a:	e016      	b.n	8002daa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2201      	movs	r2, #1
 8002d82:	2104      	movs	r1, #4
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fd53 	bl	8003830 <TIM_CCxChannelCmd>
      break;
 8002d8a:	e00e      	b.n	8002daa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2201      	movs	r2, #1
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fd4b 	bl	8003830 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	2104      	movs	r1, #4
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fd44 	bl	8003830 <TIM_CCxChannelCmd>
      break;
 8002da8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0201 	orr.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d122      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d11b      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0202 	mvn.w	r2, #2
 8002df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fa76 	bl	80032f8 <HAL_TIM_IC_CaptureCallback>
 8002e0c:	e005      	b.n	8002e1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fa69 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fa78 	bl	800330a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d122      	bne.n	8002e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d11b      	bne.n	8002e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0204 	mvn.w	r2, #4
 8002e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa4c 	bl	80032f8 <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fa3f 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fa4e 	bl	800330a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d122      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0208 	mvn.w	r2, #8
 8002e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fa22 	bl	80032f8 <HAL_TIM_IC_CaptureCallback>
 8002eb4:	e005      	b.n	8002ec2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa15 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fa24 	bl	800330a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	d122      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d11b      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0210 	mvn.w	r2, #16
 8002eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f9f8 	bl	80032f8 <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f9eb 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f9fa 	bl	800330a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d10e      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d107      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0201 	mvn.w	r2, #1
 8002f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe fa1e 	bl	8001384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d10e      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	2b80      	cmp	r3, #128	; 0x80
 8002f62:	d107      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fce9 	bl	8003946 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b40      	cmp	r3, #64	; 0x40
 8002f80:	d10e      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8c:	2b40      	cmp	r3, #64	; 0x40
 8002f8e:	d107      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f9be 	bl	800331c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d10e      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d107      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0220 	mvn.w	r2, #32
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fcb4 	bl	8003934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e0ae      	b.n	8003150 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b0c      	cmp	r3, #12
 8002ffe:	f200 809f 	bhi.w	8003140 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003002:	a201      	add	r2, pc, #4	; (adr r2, 8003008 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003008:	0800303d 	.word	0x0800303d
 800300c:	08003141 	.word	0x08003141
 8003010:	08003141 	.word	0x08003141
 8003014:	08003141 	.word	0x08003141
 8003018:	0800307d 	.word	0x0800307d
 800301c:	08003141 	.word	0x08003141
 8003020:	08003141 	.word	0x08003141
 8003024:	08003141 	.word	0x08003141
 8003028:	080030bf 	.word	0x080030bf
 800302c:	08003141 	.word	0x08003141
 8003030:	08003141 	.word	0x08003141
 8003034:	08003141 	.word	0x08003141
 8003038:	080030ff 	.word	0x080030ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f9d6 	bl	80033f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0208 	orr.w	r2, r2, #8
 8003056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0204 	bic.w	r2, r2, #4
 8003066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6999      	ldr	r1, [r3, #24]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	619a      	str	r2, [r3, #24]
      break;
 800307a:	e064      	b.n	8003146 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fa1c 	bl	80034c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6999      	ldr	r1, [r3, #24]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	021a      	lsls	r2, r3, #8
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	619a      	str	r2, [r3, #24]
      break;
 80030bc:	e043      	b.n	8003146 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 fa65 	bl	8003594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0208 	orr.w	r2, r2, #8
 80030d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69da      	ldr	r2, [r3, #28]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0204 	bic.w	r2, r2, #4
 80030e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69d9      	ldr	r1, [r3, #28]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	61da      	str	r2, [r3, #28]
      break;
 80030fc:	e023      	b.n	8003146 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	4618      	mov	r0, r3
 8003106:	f000 faaf 	bl	8003668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69da      	ldr	r2, [r3, #28]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69d9      	ldr	r1, [r3, #28]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	021a      	lsls	r2, r3, #8
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	61da      	str	r2, [r3, #28]
      break;
 800313e:	e002      	b.n	8003146 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	75fb      	strb	r3, [r7, #23]
      break;
 8003144:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800314e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_TIM_ConfigClockSource+0x1c>
 8003170:	2302      	movs	r3, #2
 8003172:	e0b4      	b.n	80032de <HAL_TIM_ConfigClockSource+0x186>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800319a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ac:	d03e      	beq.n	800322c <HAL_TIM_ConfigClockSource+0xd4>
 80031ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b2:	f200 8087 	bhi.w	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ba:	f000 8086 	beq.w	80032ca <HAL_TIM_ConfigClockSource+0x172>
 80031be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c2:	d87f      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b70      	cmp	r3, #112	; 0x70
 80031c6:	d01a      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0xa6>
 80031c8:	2b70      	cmp	r3, #112	; 0x70
 80031ca:	d87b      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031cc:	2b60      	cmp	r3, #96	; 0x60
 80031ce:	d050      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0x11a>
 80031d0:	2b60      	cmp	r3, #96	; 0x60
 80031d2:	d877      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031d4:	2b50      	cmp	r3, #80	; 0x50
 80031d6:	d03c      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0xfa>
 80031d8:	2b50      	cmp	r3, #80	; 0x50
 80031da:	d873      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d058      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x13a>
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d86f      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031e4:	2b30      	cmp	r3, #48	; 0x30
 80031e6:	d064      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x15a>
 80031e8:	2b30      	cmp	r3, #48	; 0x30
 80031ea:	d86b      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d060      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x15a>
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d867      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d05c      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x15a>
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d05a      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x15a>
 80031fc:	e062      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800320e:	f000 faf0 	bl	80037f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003220:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	609a      	str	r2, [r3, #8]
      break;
 800322a:	e04f      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800323c:	f000 fad9 	bl	80037f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800324e:	609a      	str	r2, [r3, #8]
      break;
 8003250:	e03c      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800325e:	461a      	mov	r2, r3
 8003260:	f000 fa50 	bl	8003704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2150      	movs	r1, #80	; 0x50
 800326a:	4618      	mov	r0, r3
 800326c:	f000 faa7 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 8003270:	e02c      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800327e:	461a      	mov	r2, r3
 8003280:	f000 fa6e 	bl	8003760 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2160      	movs	r1, #96	; 0x60
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fa97 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 8003290:	e01c      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800329e:	461a      	mov	r2, r3
 80032a0:	f000 fa30 	bl	8003704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2140      	movs	r1, #64	; 0x40
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fa87 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 80032b0:	e00c      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4619      	mov	r1, r3
 80032bc:	4610      	mov	r0, r2
 80032be:	f000 fa7e 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 80032c2:	e003      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
      break;
 80032c8:	e000      	b.n	80032cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
	...

08003330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a29      	ldr	r2, [pc, #164]	; (80033e8 <TIM_Base_SetConfig+0xb8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00b      	beq.n	8003360 <TIM_Base_SetConfig+0x30>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334e:	d007      	beq.n	8003360 <TIM_Base_SetConfig+0x30>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a26      	ldr	r2, [pc, #152]	; (80033ec <TIM_Base_SetConfig+0xbc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_Base_SetConfig+0x30>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a25      	ldr	r2, [pc, #148]	; (80033f0 <TIM_Base_SetConfig+0xc0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d108      	bne.n	8003372 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <TIM_Base_SetConfig+0xb8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00b      	beq.n	8003392 <TIM_Base_SetConfig+0x62>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003380:	d007      	beq.n	8003392 <TIM_Base_SetConfig+0x62>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a19      	ldr	r2, [pc, #100]	; (80033ec <TIM_Base_SetConfig+0xbc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <TIM_Base_SetConfig+0x62>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <TIM_Base_SetConfig+0xc0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d108      	bne.n	80033a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <TIM_Base_SetConfig+0xb8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d103      	bne.n	80033d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	615a      	str	r2, [r3, #20]
}
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000800 	.word	0x40000800

080033f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f023 0201 	bic.w	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f023 0302 	bic.w	r3, r3, #2
 800343c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <TIM_OC1_SetConfig+0xc8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d10c      	bne.n	800346a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f023 0308 	bic.w	r3, r3, #8
 8003456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f023 0304 	bic.w	r3, r3, #4
 8003468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a13      	ldr	r2, [pc, #76]	; (80034bc <TIM_OC1_SetConfig+0xc8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d111      	bne.n	8003496 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	621a      	str	r2, [r3, #32]
}
 80034b0:	bf00      	nop
 80034b2:	371c      	adds	r7, #28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40012c00 	.word	0x40012c00

080034c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f023 0210 	bic.w	r2, r3, #16
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0320 	bic.w	r3, r3, #32
 800350a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a1d      	ldr	r2, [pc, #116]	; (8003590 <TIM_OC2_SetConfig+0xd0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d10d      	bne.n	800353c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800353a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a14      	ldr	r2, [pc, #80]	; (8003590 <TIM_OC2_SetConfig+0xd0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d113      	bne.n	800356c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800354a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	621a      	str	r2, [r3, #32]
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	40012c00 	.word	0x40012c00

08003594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0303 	bic.w	r3, r3, #3
 80035ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	021b      	lsls	r3, r3, #8
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <TIM_OC3_SetConfig+0xd0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10d      	bne.n	800360e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800360c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a14      	ldr	r2, [pc, #80]	; (8003664 <TIM_OC3_SetConfig+0xd0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d113      	bne.n	800363e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800361c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40012c00 	.word	0x40012c00

08003668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	031b      	lsls	r3, r3, #12
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a0f      	ldr	r2, [pc, #60]	; (8003700 <TIM_OC4_SetConfig+0x98>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d109      	bne.n	80036dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	019b      	lsls	r3, r3, #6
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	621a      	str	r2, [r3, #32]
}
 80036f6:	bf00      	nop
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	40012c00 	.word	0x40012c00

08003704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f023 0201 	bic.w	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800372e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f023 030a 	bic.w	r3, r3, #10
 8003740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	621a      	str	r2, [r3, #32]
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	f023 0210 	bic.w	r2, r3, #16
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800378a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	031b      	lsls	r3, r3, #12
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800379c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	621a      	str	r2, [r3, #32]
}
 80037b4:	bf00      	nop
 80037b6:	371c      	adds	r7, #28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	f043 0307 	orr.w	r3, r3, #7
 80037e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	609a      	str	r2, [r3, #8]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr

080037f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b087      	sub	sp, #28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800380c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	021a      	lsls	r2, r3, #8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	431a      	orrs	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	4313      	orrs	r3, r2
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	609a      	str	r2, [r3, #8]
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr

08003830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2201      	movs	r2, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1a      	ldr	r2, [r3, #32]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	43db      	mvns	r3, r3
 8003852:	401a      	ands	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a1a      	ldr	r2, [r3, #32]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	fa01 f303 	lsl.w	r3, r1, r3
 8003868:	431a      	orrs	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	621a      	str	r2, [r3, #32]
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800388c:	2302      	movs	r3, #2
 800388e:	e046      	b.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a16      	ldr	r2, [pc, #88]	; (8003928 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00e      	beq.n	80038f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038dc:	d009      	beq.n	80038f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a12      	ldr	r2, [pc, #72]	; (800392c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a10      	ldr	r2, [pc, #64]	; (8003930 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d10c      	bne.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	4313      	orrs	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr
 8003928:	40012c00 	.word	0x40012c00
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800

08003934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr

08003946 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <std>:
 8003958:	2300      	movs	r3, #0
 800395a:	b510      	push	{r4, lr}
 800395c:	4604      	mov	r4, r0
 800395e:	e9c0 3300 	strd	r3, r3, [r0]
 8003962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003966:	6083      	str	r3, [r0, #8]
 8003968:	8181      	strh	r1, [r0, #12]
 800396a:	6643      	str	r3, [r0, #100]	; 0x64
 800396c:	81c2      	strh	r2, [r0, #14]
 800396e:	6183      	str	r3, [r0, #24]
 8003970:	4619      	mov	r1, r3
 8003972:	2208      	movs	r2, #8
 8003974:	305c      	adds	r0, #92	; 0x5c
 8003976:	f000 f906 	bl	8003b86 <memset>
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <std+0x58>)
 800397c:	6224      	str	r4, [r4, #32]
 800397e:	6263      	str	r3, [r4, #36]	; 0x24
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <std+0x5c>)
 8003982:	62a3      	str	r3, [r4, #40]	; 0x28
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <std+0x60>)
 8003986:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <std+0x64>)
 800398a:	6323      	str	r3, [r4, #48]	; 0x30
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <std+0x68>)
 800398e:	429c      	cmp	r4, r3
 8003990:	d006      	beq.n	80039a0 <std+0x48>
 8003992:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003996:	4294      	cmp	r4, r2
 8003998:	d002      	beq.n	80039a0 <std+0x48>
 800399a:	33d0      	adds	r3, #208	; 0xd0
 800399c:	429c      	cmp	r4, r3
 800399e:	d105      	bne.n	80039ac <std+0x54>
 80039a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039a8:	f000 b966 	b.w	8003c78 <__retarget_lock_init_recursive>
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	bf00      	nop
 80039b0:	08003b01 	.word	0x08003b01
 80039b4:	08003b23 	.word	0x08003b23
 80039b8:	08003b5b 	.word	0x08003b5b
 80039bc:	08003b7f 	.word	0x08003b7f
 80039c0:	200001b8 	.word	0x200001b8

080039c4 <stdio_exit_handler>:
 80039c4:	4a02      	ldr	r2, [pc, #8]	; (80039d0 <stdio_exit_handler+0xc>)
 80039c6:	4903      	ldr	r1, [pc, #12]	; (80039d4 <stdio_exit_handler+0x10>)
 80039c8:	4803      	ldr	r0, [pc, #12]	; (80039d8 <stdio_exit_handler+0x14>)
 80039ca:	f000 b869 	b.w	8003aa0 <_fwalk_sglue>
 80039ce:	bf00      	nop
 80039d0:	2000000c 	.word	0x2000000c
 80039d4:	08004519 	.word	0x08004519
 80039d8:	20000018 	.word	0x20000018

080039dc <cleanup_stdio>:
 80039dc:	6841      	ldr	r1, [r0, #4]
 80039de:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <cleanup_stdio+0x34>)
 80039e0:	b510      	push	{r4, lr}
 80039e2:	4299      	cmp	r1, r3
 80039e4:	4604      	mov	r4, r0
 80039e6:	d001      	beq.n	80039ec <cleanup_stdio+0x10>
 80039e8:	f000 fd96 	bl	8004518 <_fflush_r>
 80039ec:	68a1      	ldr	r1, [r4, #8]
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <cleanup_stdio+0x38>)
 80039f0:	4299      	cmp	r1, r3
 80039f2:	d002      	beq.n	80039fa <cleanup_stdio+0x1e>
 80039f4:	4620      	mov	r0, r4
 80039f6:	f000 fd8f 	bl	8004518 <_fflush_r>
 80039fa:	68e1      	ldr	r1, [r4, #12]
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <cleanup_stdio+0x3c>)
 80039fe:	4299      	cmp	r1, r3
 8003a00:	d004      	beq.n	8003a0c <cleanup_stdio+0x30>
 8003a02:	4620      	mov	r0, r4
 8003a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a08:	f000 bd86 	b.w	8004518 <_fflush_r>
 8003a0c:	bd10      	pop	{r4, pc}
 8003a0e:	bf00      	nop
 8003a10:	200001b8 	.word	0x200001b8
 8003a14:	20000220 	.word	0x20000220
 8003a18:	20000288 	.word	0x20000288

08003a1c <global_stdio_init.part.0>:
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <global_stdio_init.part.0+0x30>)
 8003a20:	4c0b      	ldr	r4, [pc, #44]	; (8003a50 <global_stdio_init.part.0+0x34>)
 8003a22:	4a0c      	ldr	r2, [pc, #48]	; (8003a54 <global_stdio_init.part.0+0x38>)
 8003a24:	4620      	mov	r0, r4
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	2104      	movs	r1, #4
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f7ff ff94 	bl	8003958 <std>
 8003a30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003a34:	2201      	movs	r2, #1
 8003a36:	2109      	movs	r1, #9
 8003a38:	f7ff ff8e 	bl	8003958 <std>
 8003a3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003a40:	2202      	movs	r2, #2
 8003a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a46:	2112      	movs	r1, #18
 8003a48:	f7ff bf86 	b.w	8003958 <std>
 8003a4c:	200002f0 	.word	0x200002f0
 8003a50:	200001b8 	.word	0x200001b8
 8003a54:	080039c5 	.word	0x080039c5

08003a58 <__sfp_lock_acquire>:
 8003a58:	4801      	ldr	r0, [pc, #4]	; (8003a60 <__sfp_lock_acquire+0x8>)
 8003a5a:	f000 b90e 	b.w	8003c7a <__retarget_lock_acquire_recursive>
 8003a5e:	bf00      	nop
 8003a60:	200002f9 	.word	0x200002f9

08003a64 <__sfp_lock_release>:
 8003a64:	4801      	ldr	r0, [pc, #4]	; (8003a6c <__sfp_lock_release+0x8>)
 8003a66:	f000 b909 	b.w	8003c7c <__retarget_lock_release_recursive>
 8003a6a:	bf00      	nop
 8003a6c:	200002f9 	.word	0x200002f9

08003a70 <__sinit>:
 8003a70:	b510      	push	{r4, lr}
 8003a72:	4604      	mov	r4, r0
 8003a74:	f7ff fff0 	bl	8003a58 <__sfp_lock_acquire>
 8003a78:	6a23      	ldr	r3, [r4, #32]
 8003a7a:	b11b      	cbz	r3, 8003a84 <__sinit+0x14>
 8003a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a80:	f7ff bff0 	b.w	8003a64 <__sfp_lock_release>
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <__sinit+0x28>)
 8003a86:	6223      	str	r3, [r4, #32]
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <__sinit+0x2c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f5      	bne.n	8003a7c <__sinit+0xc>
 8003a90:	f7ff ffc4 	bl	8003a1c <global_stdio_init.part.0>
 8003a94:	e7f2      	b.n	8003a7c <__sinit+0xc>
 8003a96:	bf00      	nop
 8003a98:	080039dd 	.word	0x080039dd
 8003a9c:	200002f0 	.word	0x200002f0

08003aa0 <_fwalk_sglue>:
 8003aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	4688      	mov	r8, r1
 8003aa8:	4614      	mov	r4, r2
 8003aaa:	2600      	movs	r6, #0
 8003aac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ab0:	f1b9 0901 	subs.w	r9, r9, #1
 8003ab4:	d505      	bpl.n	8003ac2 <_fwalk_sglue+0x22>
 8003ab6:	6824      	ldr	r4, [r4, #0]
 8003ab8:	2c00      	cmp	r4, #0
 8003aba:	d1f7      	bne.n	8003aac <_fwalk_sglue+0xc>
 8003abc:	4630      	mov	r0, r6
 8003abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ac2:	89ab      	ldrh	r3, [r5, #12]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d907      	bls.n	8003ad8 <_fwalk_sglue+0x38>
 8003ac8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003acc:	3301      	adds	r3, #1
 8003ace:	d003      	beq.n	8003ad8 <_fwalk_sglue+0x38>
 8003ad0:	4629      	mov	r1, r5
 8003ad2:	4638      	mov	r0, r7
 8003ad4:	47c0      	blx	r8
 8003ad6:	4306      	orrs	r6, r0
 8003ad8:	3568      	adds	r5, #104	; 0x68
 8003ada:	e7e9      	b.n	8003ab0 <_fwalk_sglue+0x10>

08003adc <iprintf>:
 8003adc:	b40f      	push	{r0, r1, r2, r3}
 8003ade:	b507      	push	{r0, r1, r2, lr}
 8003ae0:	4906      	ldr	r1, [pc, #24]	; (8003afc <iprintf+0x20>)
 8003ae2:	ab04      	add	r3, sp, #16
 8003ae4:	6808      	ldr	r0, [r1, #0]
 8003ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003aea:	6881      	ldr	r1, [r0, #8]
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	f000 f9e3 	bl	8003eb8 <_vfiprintf_r>
 8003af2:	b003      	add	sp, #12
 8003af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003af8:	b004      	add	sp, #16
 8003afa:	4770      	bx	lr
 8003afc:	20000064 	.word	0x20000064

08003b00 <__sread>:
 8003b00:	b510      	push	{r4, lr}
 8003b02:	460c      	mov	r4, r1
 8003b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b08:	f000 f868 	bl	8003bdc <_read_r>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	bfab      	itete	ge
 8003b10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b12:	89a3      	ldrhlt	r3, [r4, #12]
 8003b14:	181b      	addge	r3, r3, r0
 8003b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b1a:	bfac      	ite	ge
 8003b1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b1e:	81a3      	strhlt	r3, [r4, #12]
 8003b20:	bd10      	pop	{r4, pc}

08003b22 <__swrite>:
 8003b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b26:	461f      	mov	r7, r3
 8003b28:	898b      	ldrh	r3, [r1, #12]
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	05db      	lsls	r3, r3, #23
 8003b2e:	460c      	mov	r4, r1
 8003b30:	4616      	mov	r6, r2
 8003b32:	d505      	bpl.n	8003b40 <__swrite+0x1e>
 8003b34:	2302      	movs	r3, #2
 8003b36:	2200      	movs	r2, #0
 8003b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b3c:	f000 f83c 	bl	8003bb8 <_lseek_r>
 8003b40:	89a3      	ldrh	r3, [r4, #12]
 8003b42:	4632      	mov	r2, r6
 8003b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b48:	81a3      	strh	r3, [r4, #12]
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	463b      	mov	r3, r7
 8003b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b56:	f000 b853 	b.w	8003c00 <_write_r>

08003b5a <__sseek>:
 8003b5a:	b510      	push	{r4, lr}
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b62:	f000 f829 	bl	8003bb8 <_lseek_r>
 8003b66:	1c43      	adds	r3, r0, #1
 8003b68:	89a3      	ldrh	r3, [r4, #12]
 8003b6a:	bf15      	itete	ne
 8003b6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b76:	81a3      	strheq	r3, [r4, #12]
 8003b78:	bf18      	it	ne
 8003b7a:	81a3      	strhne	r3, [r4, #12]
 8003b7c:	bd10      	pop	{r4, pc}

08003b7e <__sclose>:
 8003b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b82:	f000 b809 	b.w	8003b98 <_close_r>

08003b86 <memset>:
 8003b86:	4603      	mov	r3, r0
 8003b88:	4402      	add	r2, r0
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d100      	bne.n	8003b90 <memset+0xa>
 8003b8e:	4770      	bx	lr
 8003b90:	f803 1b01 	strb.w	r1, [r3], #1
 8003b94:	e7f9      	b.n	8003b8a <memset+0x4>
	...

08003b98 <_close_r>:
 8003b98:	b538      	push	{r3, r4, r5, lr}
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	4d05      	ldr	r5, [pc, #20]	; (8003bb4 <_close_r+0x1c>)
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	602b      	str	r3, [r5, #0]
 8003ba4:	f7fd fcc3 	bl	800152e <_close>
 8003ba8:	1c43      	adds	r3, r0, #1
 8003baa:	d102      	bne.n	8003bb2 <_close_r+0x1a>
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	b103      	cbz	r3, 8003bb2 <_close_r+0x1a>
 8003bb0:	6023      	str	r3, [r4, #0]
 8003bb2:	bd38      	pop	{r3, r4, r5, pc}
 8003bb4:	200002f4 	.word	0x200002f4

08003bb8 <_lseek_r>:
 8003bb8:	b538      	push	{r3, r4, r5, lr}
 8003bba:	4604      	mov	r4, r0
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	4d05      	ldr	r5, [pc, #20]	; (8003bd8 <_lseek_r+0x20>)
 8003bc4:	602a      	str	r2, [r5, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f7fd fcd5 	bl	8001576 <_lseek>
 8003bcc:	1c43      	adds	r3, r0, #1
 8003bce:	d102      	bne.n	8003bd6 <_lseek_r+0x1e>
 8003bd0:	682b      	ldr	r3, [r5, #0]
 8003bd2:	b103      	cbz	r3, 8003bd6 <_lseek_r+0x1e>
 8003bd4:	6023      	str	r3, [r4, #0]
 8003bd6:	bd38      	pop	{r3, r4, r5, pc}
 8003bd8:	200002f4 	.word	0x200002f4

08003bdc <_read_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	4604      	mov	r4, r0
 8003be0:	4608      	mov	r0, r1
 8003be2:	4611      	mov	r1, r2
 8003be4:	2200      	movs	r2, #0
 8003be6:	4d05      	ldr	r5, [pc, #20]	; (8003bfc <_read_r+0x20>)
 8003be8:	602a      	str	r2, [r5, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	f7fd fc82 	bl	80014f4 <_read>
 8003bf0:	1c43      	adds	r3, r0, #1
 8003bf2:	d102      	bne.n	8003bfa <_read_r+0x1e>
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	b103      	cbz	r3, 8003bfa <_read_r+0x1e>
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}
 8003bfc:	200002f4 	.word	0x200002f4

08003c00 <_write_r>:
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	4604      	mov	r4, r0
 8003c04:	4608      	mov	r0, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	2200      	movs	r2, #0
 8003c0a:	4d05      	ldr	r5, [pc, #20]	; (8003c20 <_write_r+0x20>)
 8003c0c:	602a      	str	r2, [r5, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f7fd fa40 	bl	8001094 <_write>
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	d102      	bne.n	8003c1e <_write_r+0x1e>
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	b103      	cbz	r3, 8003c1e <_write_r+0x1e>
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	bd38      	pop	{r3, r4, r5, pc}
 8003c20:	200002f4 	.word	0x200002f4

08003c24 <__errno>:
 8003c24:	4b01      	ldr	r3, [pc, #4]	; (8003c2c <__errno+0x8>)
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000064 	.word	0x20000064

08003c30 <__libc_init_array>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	2600      	movs	r6, #0
 8003c34:	4d0c      	ldr	r5, [pc, #48]	; (8003c68 <__libc_init_array+0x38>)
 8003c36:	4c0d      	ldr	r4, [pc, #52]	; (8003c6c <__libc_init_array+0x3c>)
 8003c38:	1b64      	subs	r4, r4, r5
 8003c3a:	10a4      	asrs	r4, r4, #2
 8003c3c:	42a6      	cmp	r6, r4
 8003c3e:	d109      	bne.n	8003c54 <__libc_init_array+0x24>
 8003c40:	f000 fdca 	bl	80047d8 <_init>
 8003c44:	2600      	movs	r6, #0
 8003c46:	4d0a      	ldr	r5, [pc, #40]	; (8003c70 <__libc_init_array+0x40>)
 8003c48:	4c0a      	ldr	r4, [pc, #40]	; (8003c74 <__libc_init_array+0x44>)
 8003c4a:	1b64      	subs	r4, r4, r5
 8003c4c:	10a4      	asrs	r4, r4, #2
 8003c4e:	42a6      	cmp	r6, r4
 8003c50:	d105      	bne.n	8003c5e <__libc_init_array+0x2e>
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c58:	4798      	blx	r3
 8003c5a:	3601      	adds	r6, #1
 8003c5c:	e7ee      	b.n	8003c3c <__libc_init_array+0xc>
 8003c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c62:	4798      	blx	r3
 8003c64:	3601      	adds	r6, #1
 8003c66:	e7f2      	b.n	8003c4e <__libc_init_array+0x1e>
 8003c68:	08004868 	.word	0x08004868
 8003c6c:	08004868 	.word	0x08004868
 8003c70:	08004868 	.word	0x08004868
 8003c74:	0800486c 	.word	0x0800486c

08003c78 <__retarget_lock_init_recursive>:
 8003c78:	4770      	bx	lr

08003c7a <__retarget_lock_acquire_recursive>:
 8003c7a:	4770      	bx	lr

08003c7c <__retarget_lock_release_recursive>:
 8003c7c:	4770      	bx	lr
	...

08003c80 <_free_r>:
 8003c80:	b538      	push	{r3, r4, r5, lr}
 8003c82:	4605      	mov	r5, r0
 8003c84:	2900      	cmp	r1, #0
 8003c86:	d040      	beq.n	8003d0a <_free_r+0x8a>
 8003c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c8c:	1f0c      	subs	r4, r1, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bfb8      	it	lt
 8003c92:	18e4      	addlt	r4, r4, r3
 8003c94:	f000 f8dc 	bl	8003e50 <__malloc_lock>
 8003c98:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <_free_r+0x8c>)
 8003c9a:	6813      	ldr	r3, [r2, #0]
 8003c9c:	b933      	cbnz	r3, 8003cac <_free_r+0x2c>
 8003c9e:	6063      	str	r3, [r4, #4]
 8003ca0:	6014      	str	r4, [r2, #0]
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ca8:	f000 b8d8 	b.w	8003e5c <__malloc_unlock>
 8003cac:	42a3      	cmp	r3, r4
 8003cae:	d908      	bls.n	8003cc2 <_free_r+0x42>
 8003cb0:	6820      	ldr	r0, [r4, #0]
 8003cb2:	1821      	adds	r1, r4, r0
 8003cb4:	428b      	cmp	r3, r1
 8003cb6:	bf01      	itttt	eq
 8003cb8:	6819      	ldreq	r1, [r3, #0]
 8003cba:	685b      	ldreq	r3, [r3, #4]
 8003cbc:	1809      	addeq	r1, r1, r0
 8003cbe:	6021      	streq	r1, [r4, #0]
 8003cc0:	e7ed      	b.n	8003c9e <_free_r+0x1e>
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	b10b      	cbz	r3, 8003ccc <_free_r+0x4c>
 8003cc8:	42a3      	cmp	r3, r4
 8003cca:	d9fa      	bls.n	8003cc2 <_free_r+0x42>
 8003ccc:	6811      	ldr	r1, [r2, #0]
 8003cce:	1850      	adds	r0, r2, r1
 8003cd0:	42a0      	cmp	r0, r4
 8003cd2:	d10b      	bne.n	8003cec <_free_r+0x6c>
 8003cd4:	6820      	ldr	r0, [r4, #0]
 8003cd6:	4401      	add	r1, r0
 8003cd8:	1850      	adds	r0, r2, r1
 8003cda:	4283      	cmp	r3, r0
 8003cdc:	6011      	str	r1, [r2, #0]
 8003cde:	d1e0      	bne.n	8003ca2 <_free_r+0x22>
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4408      	add	r0, r1
 8003ce6:	6010      	str	r0, [r2, #0]
 8003ce8:	6053      	str	r3, [r2, #4]
 8003cea:	e7da      	b.n	8003ca2 <_free_r+0x22>
 8003cec:	d902      	bls.n	8003cf4 <_free_r+0x74>
 8003cee:	230c      	movs	r3, #12
 8003cf0:	602b      	str	r3, [r5, #0]
 8003cf2:	e7d6      	b.n	8003ca2 <_free_r+0x22>
 8003cf4:	6820      	ldr	r0, [r4, #0]
 8003cf6:	1821      	adds	r1, r4, r0
 8003cf8:	428b      	cmp	r3, r1
 8003cfa:	bf01      	itttt	eq
 8003cfc:	6819      	ldreq	r1, [r3, #0]
 8003cfe:	685b      	ldreq	r3, [r3, #4]
 8003d00:	1809      	addeq	r1, r1, r0
 8003d02:	6021      	streq	r1, [r4, #0]
 8003d04:	6063      	str	r3, [r4, #4]
 8003d06:	6054      	str	r4, [r2, #4]
 8003d08:	e7cb      	b.n	8003ca2 <_free_r+0x22>
 8003d0a:	bd38      	pop	{r3, r4, r5, pc}
 8003d0c:	200002fc 	.word	0x200002fc

08003d10 <sbrk_aligned>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	4e0e      	ldr	r6, [pc, #56]	; (8003d4c <sbrk_aligned+0x3c>)
 8003d14:	460c      	mov	r4, r1
 8003d16:	6831      	ldr	r1, [r6, #0]
 8003d18:	4605      	mov	r5, r0
 8003d1a:	b911      	cbnz	r1, 8003d22 <sbrk_aligned+0x12>
 8003d1c:	f000 fcba 	bl	8004694 <_sbrk_r>
 8003d20:	6030      	str	r0, [r6, #0]
 8003d22:	4621      	mov	r1, r4
 8003d24:	4628      	mov	r0, r5
 8003d26:	f000 fcb5 	bl	8004694 <_sbrk_r>
 8003d2a:	1c43      	adds	r3, r0, #1
 8003d2c:	d00a      	beq.n	8003d44 <sbrk_aligned+0x34>
 8003d2e:	1cc4      	adds	r4, r0, #3
 8003d30:	f024 0403 	bic.w	r4, r4, #3
 8003d34:	42a0      	cmp	r0, r4
 8003d36:	d007      	beq.n	8003d48 <sbrk_aligned+0x38>
 8003d38:	1a21      	subs	r1, r4, r0
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f000 fcaa 	bl	8004694 <_sbrk_r>
 8003d40:	3001      	adds	r0, #1
 8003d42:	d101      	bne.n	8003d48 <sbrk_aligned+0x38>
 8003d44:	f04f 34ff 	mov.w	r4, #4294967295
 8003d48:	4620      	mov	r0, r4
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
 8003d4c:	20000300 	.word	0x20000300

08003d50 <_malloc_r>:
 8003d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d54:	1ccd      	adds	r5, r1, #3
 8003d56:	f025 0503 	bic.w	r5, r5, #3
 8003d5a:	3508      	adds	r5, #8
 8003d5c:	2d0c      	cmp	r5, #12
 8003d5e:	bf38      	it	cc
 8003d60:	250c      	movcc	r5, #12
 8003d62:	2d00      	cmp	r5, #0
 8003d64:	4607      	mov	r7, r0
 8003d66:	db01      	blt.n	8003d6c <_malloc_r+0x1c>
 8003d68:	42a9      	cmp	r1, r5
 8003d6a:	d905      	bls.n	8003d78 <_malloc_r+0x28>
 8003d6c:	230c      	movs	r3, #12
 8003d6e:	2600      	movs	r6, #0
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	4630      	mov	r0, r6
 8003d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003e4c <_malloc_r+0xfc>
 8003d7c:	f000 f868 	bl	8003e50 <__malloc_lock>
 8003d80:	f8d8 3000 	ldr.w	r3, [r8]
 8003d84:	461c      	mov	r4, r3
 8003d86:	bb5c      	cbnz	r4, 8003de0 <_malloc_r+0x90>
 8003d88:	4629      	mov	r1, r5
 8003d8a:	4638      	mov	r0, r7
 8003d8c:	f7ff ffc0 	bl	8003d10 <sbrk_aligned>
 8003d90:	1c43      	adds	r3, r0, #1
 8003d92:	4604      	mov	r4, r0
 8003d94:	d155      	bne.n	8003e42 <_malloc_r+0xf2>
 8003d96:	f8d8 4000 	ldr.w	r4, [r8]
 8003d9a:	4626      	mov	r6, r4
 8003d9c:	2e00      	cmp	r6, #0
 8003d9e:	d145      	bne.n	8003e2c <_malloc_r+0xdc>
 8003da0:	2c00      	cmp	r4, #0
 8003da2:	d048      	beq.n	8003e36 <_malloc_r+0xe6>
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	4631      	mov	r1, r6
 8003da8:	4638      	mov	r0, r7
 8003daa:	eb04 0903 	add.w	r9, r4, r3
 8003dae:	f000 fc71 	bl	8004694 <_sbrk_r>
 8003db2:	4581      	cmp	r9, r0
 8003db4:	d13f      	bne.n	8003e36 <_malloc_r+0xe6>
 8003db6:	6821      	ldr	r1, [r4, #0]
 8003db8:	4638      	mov	r0, r7
 8003dba:	1a6d      	subs	r5, r5, r1
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	f7ff ffa7 	bl	8003d10 <sbrk_aligned>
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	d037      	beq.n	8003e36 <_malloc_r+0xe6>
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	442b      	add	r3, r5
 8003dca:	6023      	str	r3, [r4, #0]
 8003dcc:	f8d8 3000 	ldr.w	r3, [r8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d038      	beq.n	8003e46 <_malloc_r+0xf6>
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	42a2      	cmp	r2, r4
 8003dd8:	d12b      	bne.n	8003e32 <_malloc_r+0xe2>
 8003dda:	2200      	movs	r2, #0
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	e00f      	b.n	8003e00 <_malloc_r+0xb0>
 8003de0:	6822      	ldr	r2, [r4, #0]
 8003de2:	1b52      	subs	r2, r2, r5
 8003de4:	d41f      	bmi.n	8003e26 <_malloc_r+0xd6>
 8003de6:	2a0b      	cmp	r2, #11
 8003de8:	d917      	bls.n	8003e1a <_malloc_r+0xca>
 8003dea:	1961      	adds	r1, r4, r5
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	6025      	str	r5, [r4, #0]
 8003df0:	bf18      	it	ne
 8003df2:	6059      	strne	r1, [r3, #4]
 8003df4:	6863      	ldr	r3, [r4, #4]
 8003df6:	bf08      	it	eq
 8003df8:	f8c8 1000 	streq.w	r1, [r8]
 8003dfc:	5162      	str	r2, [r4, r5]
 8003dfe:	604b      	str	r3, [r1, #4]
 8003e00:	4638      	mov	r0, r7
 8003e02:	f104 060b 	add.w	r6, r4, #11
 8003e06:	f000 f829 	bl	8003e5c <__malloc_unlock>
 8003e0a:	f026 0607 	bic.w	r6, r6, #7
 8003e0e:	1d23      	adds	r3, r4, #4
 8003e10:	1af2      	subs	r2, r6, r3
 8003e12:	d0ae      	beq.n	8003d72 <_malloc_r+0x22>
 8003e14:	1b9b      	subs	r3, r3, r6
 8003e16:	50a3      	str	r3, [r4, r2]
 8003e18:	e7ab      	b.n	8003d72 <_malloc_r+0x22>
 8003e1a:	42a3      	cmp	r3, r4
 8003e1c:	6862      	ldr	r2, [r4, #4]
 8003e1e:	d1dd      	bne.n	8003ddc <_malloc_r+0x8c>
 8003e20:	f8c8 2000 	str.w	r2, [r8]
 8003e24:	e7ec      	b.n	8003e00 <_malloc_r+0xb0>
 8003e26:	4623      	mov	r3, r4
 8003e28:	6864      	ldr	r4, [r4, #4]
 8003e2a:	e7ac      	b.n	8003d86 <_malloc_r+0x36>
 8003e2c:	4634      	mov	r4, r6
 8003e2e:	6876      	ldr	r6, [r6, #4]
 8003e30:	e7b4      	b.n	8003d9c <_malloc_r+0x4c>
 8003e32:	4613      	mov	r3, r2
 8003e34:	e7cc      	b.n	8003dd0 <_malloc_r+0x80>
 8003e36:	230c      	movs	r3, #12
 8003e38:	4638      	mov	r0, r7
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	f000 f80e 	bl	8003e5c <__malloc_unlock>
 8003e40:	e797      	b.n	8003d72 <_malloc_r+0x22>
 8003e42:	6025      	str	r5, [r4, #0]
 8003e44:	e7dc      	b.n	8003e00 <_malloc_r+0xb0>
 8003e46:	605b      	str	r3, [r3, #4]
 8003e48:	deff      	udf	#255	; 0xff
 8003e4a:	bf00      	nop
 8003e4c:	200002fc 	.word	0x200002fc

08003e50 <__malloc_lock>:
 8003e50:	4801      	ldr	r0, [pc, #4]	; (8003e58 <__malloc_lock+0x8>)
 8003e52:	f7ff bf12 	b.w	8003c7a <__retarget_lock_acquire_recursive>
 8003e56:	bf00      	nop
 8003e58:	200002f8 	.word	0x200002f8

08003e5c <__malloc_unlock>:
 8003e5c:	4801      	ldr	r0, [pc, #4]	; (8003e64 <__malloc_unlock+0x8>)
 8003e5e:	f7ff bf0d 	b.w	8003c7c <__retarget_lock_release_recursive>
 8003e62:	bf00      	nop
 8003e64:	200002f8 	.word	0x200002f8

08003e68 <__sfputc_r>:
 8003e68:	6893      	ldr	r3, [r2, #8]
 8003e6a:	b410      	push	{r4}
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	6093      	str	r3, [r2, #8]
 8003e72:	da07      	bge.n	8003e84 <__sfputc_r+0x1c>
 8003e74:	6994      	ldr	r4, [r2, #24]
 8003e76:	42a3      	cmp	r3, r4
 8003e78:	db01      	blt.n	8003e7e <__sfputc_r+0x16>
 8003e7a:	290a      	cmp	r1, #10
 8003e7c:	d102      	bne.n	8003e84 <__sfputc_r+0x1c>
 8003e7e:	bc10      	pop	{r4}
 8003e80:	f000 bb72 	b.w	8004568 <__swbuf_r>
 8003e84:	6813      	ldr	r3, [r2, #0]
 8003e86:	1c58      	adds	r0, r3, #1
 8003e88:	6010      	str	r0, [r2, #0]
 8003e8a:	7019      	strb	r1, [r3, #0]
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	bc10      	pop	{r4}
 8003e90:	4770      	bx	lr

08003e92 <__sfputs_r>:
 8003e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e94:	4606      	mov	r6, r0
 8003e96:	460f      	mov	r7, r1
 8003e98:	4614      	mov	r4, r2
 8003e9a:	18d5      	adds	r5, r2, r3
 8003e9c:	42ac      	cmp	r4, r5
 8003e9e:	d101      	bne.n	8003ea4 <__sfputs_r+0x12>
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	e007      	b.n	8003eb4 <__sfputs_r+0x22>
 8003ea4:	463a      	mov	r2, r7
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eac:	f7ff ffdc 	bl	8003e68 <__sfputc_r>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	d1f3      	bne.n	8003e9c <__sfputs_r+0xa>
 8003eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003eb8 <_vfiprintf_r>:
 8003eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ebc:	460d      	mov	r5, r1
 8003ebe:	4614      	mov	r4, r2
 8003ec0:	4698      	mov	r8, r3
 8003ec2:	4606      	mov	r6, r0
 8003ec4:	b09d      	sub	sp, #116	; 0x74
 8003ec6:	b118      	cbz	r0, 8003ed0 <_vfiprintf_r+0x18>
 8003ec8:	6a03      	ldr	r3, [r0, #32]
 8003eca:	b90b      	cbnz	r3, 8003ed0 <_vfiprintf_r+0x18>
 8003ecc:	f7ff fdd0 	bl	8003a70 <__sinit>
 8003ed0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ed2:	07d9      	lsls	r1, r3, #31
 8003ed4:	d405      	bmi.n	8003ee2 <_vfiprintf_r+0x2a>
 8003ed6:	89ab      	ldrh	r3, [r5, #12]
 8003ed8:	059a      	lsls	r2, r3, #22
 8003eda:	d402      	bmi.n	8003ee2 <_vfiprintf_r+0x2a>
 8003edc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ede:	f7ff fecc 	bl	8003c7a <__retarget_lock_acquire_recursive>
 8003ee2:	89ab      	ldrh	r3, [r5, #12]
 8003ee4:	071b      	lsls	r3, r3, #28
 8003ee6:	d501      	bpl.n	8003eec <_vfiprintf_r+0x34>
 8003ee8:	692b      	ldr	r3, [r5, #16]
 8003eea:	b99b      	cbnz	r3, 8003f14 <_vfiprintf_r+0x5c>
 8003eec:	4629      	mov	r1, r5
 8003eee:	4630      	mov	r0, r6
 8003ef0:	f000 fb78 	bl	80045e4 <__swsetup_r>
 8003ef4:	b170      	cbz	r0, 8003f14 <_vfiprintf_r+0x5c>
 8003ef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ef8:	07dc      	lsls	r4, r3, #31
 8003efa:	d504      	bpl.n	8003f06 <_vfiprintf_r+0x4e>
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295
 8003f00:	b01d      	add	sp, #116	; 0x74
 8003f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f06:	89ab      	ldrh	r3, [r5, #12]
 8003f08:	0598      	lsls	r0, r3, #22
 8003f0a:	d4f7      	bmi.n	8003efc <_vfiprintf_r+0x44>
 8003f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f0e:	f7ff feb5 	bl	8003c7c <__retarget_lock_release_recursive>
 8003f12:	e7f3      	b.n	8003efc <_vfiprintf_r+0x44>
 8003f14:	2300      	movs	r3, #0
 8003f16:	9309      	str	r3, [sp, #36]	; 0x24
 8003f18:	2320      	movs	r3, #32
 8003f1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f1e:	2330      	movs	r3, #48	; 0x30
 8003f20:	f04f 0901 	mov.w	r9, #1
 8003f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f28:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80040d8 <_vfiprintf_r+0x220>
 8003f2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f30:	4623      	mov	r3, r4
 8003f32:	469a      	mov	sl, r3
 8003f34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f38:	b10a      	cbz	r2, 8003f3e <_vfiprintf_r+0x86>
 8003f3a:	2a25      	cmp	r2, #37	; 0x25
 8003f3c:	d1f9      	bne.n	8003f32 <_vfiprintf_r+0x7a>
 8003f3e:	ebba 0b04 	subs.w	fp, sl, r4
 8003f42:	d00b      	beq.n	8003f5c <_vfiprintf_r+0xa4>
 8003f44:	465b      	mov	r3, fp
 8003f46:	4622      	mov	r2, r4
 8003f48:	4629      	mov	r1, r5
 8003f4a:	4630      	mov	r0, r6
 8003f4c:	f7ff ffa1 	bl	8003e92 <__sfputs_r>
 8003f50:	3001      	adds	r0, #1
 8003f52:	f000 80a9 	beq.w	80040a8 <_vfiprintf_r+0x1f0>
 8003f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f58:	445a      	add	r2, fp
 8003f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8003f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80a1 	beq.w	80040a8 <_vfiprintf_r+0x1f0>
 8003f66:	2300      	movs	r3, #0
 8003f68:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f70:	f10a 0a01 	add.w	sl, sl, #1
 8003f74:	9304      	str	r3, [sp, #16]
 8003f76:	9307      	str	r3, [sp, #28]
 8003f78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f7c:	931a      	str	r3, [sp, #104]	; 0x68
 8003f7e:	4654      	mov	r4, sl
 8003f80:	2205      	movs	r2, #5
 8003f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f86:	4854      	ldr	r0, [pc, #336]	; (80040d8 <_vfiprintf_r+0x220>)
 8003f88:	f000 fb94 	bl	80046b4 <memchr>
 8003f8c:	9a04      	ldr	r2, [sp, #16]
 8003f8e:	b9d8      	cbnz	r0, 8003fc8 <_vfiprintf_r+0x110>
 8003f90:	06d1      	lsls	r1, r2, #27
 8003f92:	bf44      	itt	mi
 8003f94:	2320      	movmi	r3, #32
 8003f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f9a:	0713      	lsls	r3, r2, #28
 8003f9c:	bf44      	itt	mi
 8003f9e:	232b      	movmi	r3, #43	; 0x2b
 8003fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8003fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8003faa:	d015      	beq.n	8003fd8 <_vfiprintf_r+0x120>
 8003fac:	4654      	mov	r4, sl
 8003fae:	2000      	movs	r0, #0
 8003fb0:	f04f 0c0a 	mov.w	ip, #10
 8003fb4:	9a07      	ldr	r2, [sp, #28]
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fbc:	3b30      	subs	r3, #48	; 0x30
 8003fbe:	2b09      	cmp	r3, #9
 8003fc0:	d94d      	bls.n	800405e <_vfiprintf_r+0x1a6>
 8003fc2:	b1b0      	cbz	r0, 8003ff2 <_vfiprintf_r+0x13a>
 8003fc4:	9207      	str	r2, [sp, #28]
 8003fc6:	e014      	b.n	8003ff2 <_vfiprintf_r+0x13a>
 8003fc8:	eba0 0308 	sub.w	r3, r0, r8
 8003fcc:	fa09 f303 	lsl.w	r3, r9, r3
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	46a2      	mov	sl, r4
 8003fd4:	9304      	str	r3, [sp, #16]
 8003fd6:	e7d2      	b.n	8003f7e <_vfiprintf_r+0xc6>
 8003fd8:	9b03      	ldr	r3, [sp, #12]
 8003fda:	1d19      	adds	r1, r3, #4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	9103      	str	r1, [sp, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bfbb      	ittet	lt
 8003fe4:	425b      	neglt	r3, r3
 8003fe6:	f042 0202 	orrlt.w	r2, r2, #2
 8003fea:	9307      	strge	r3, [sp, #28]
 8003fec:	9307      	strlt	r3, [sp, #28]
 8003fee:	bfb8      	it	lt
 8003ff0:	9204      	strlt	r2, [sp, #16]
 8003ff2:	7823      	ldrb	r3, [r4, #0]
 8003ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8003ff6:	d10c      	bne.n	8004012 <_vfiprintf_r+0x15a>
 8003ff8:	7863      	ldrb	r3, [r4, #1]
 8003ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8003ffc:	d134      	bne.n	8004068 <_vfiprintf_r+0x1b0>
 8003ffe:	9b03      	ldr	r3, [sp, #12]
 8004000:	3402      	adds	r4, #2
 8004002:	1d1a      	adds	r2, r3, #4
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	9203      	str	r2, [sp, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	bfb8      	it	lt
 800400c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004010:	9305      	str	r3, [sp, #20]
 8004012:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040dc <_vfiprintf_r+0x224>
 8004016:	2203      	movs	r2, #3
 8004018:	4650      	mov	r0, sl
 800401a:	7821      	ldrb	r1, [r4, #0]
 800401c:	f000 fb4a 	bl	80046b4 <memchr>
 8004020:	b138      	cbz	r0, 8004032 <_vfiprintf_r+0x17a>
 8004022:	2240      	movs	r2, #64	; 0x40
 8004024:	9b04      	ldr	r3, [sp, #16]
 8004026:	eba0 000a 	sub.w	r0, r0, sl
 800402a:	4082      	lsls	r2, r0
 800402c:	4313      	orrs	r3, r2
 800402e:	3401      	adds	r4, #1
 8004030:	9304      	str	r3, [sp, #16]
 8004032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004036:	2206      	movs	r2, #6
 8004038:	4829      	ldr	r0, [pc, #164]	; (80040e0 <_vfiprintf_r+0x228>)
 800403a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800403e:	f000 fb39 	bl	80046b4 <memchr>
 8004042:	2800      	cmp	r0, #0
 8004044:	d03f      	beq.n	80040c6 <_vfiprintf_r+0x20e>
 8004046:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <_vfiprintf_r+0x22c>)
 8004048:	bb1b      	cbnz	r3, 8004092 <_vfiprintf_r+0x1da>
 800404a:	9b03      	ldr	r3, [sp, #12]
 800404c:	3307      	adds	r3, #7
 800404e:	f023 0307 	bic.w	r3, r3, #7
 8004052:	3308      	adds	r3, #8
 8004054:	9303      	str	r3, [sp, #12]
 8004056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004058:	443b      	add	r3, r7
 800405a:	9309      	str	r3, [sp, #36]	; 0x24
 800405c:	e768      	b.n	8003f30 <_vfiprintf_r+0x78>
 800405e:	460c      	mov	r4, r1
 8004060:	2001      	movs	r0, #1
 8004062:	fb0c 3202 	mla	r2, ip, r2, r3
 8004066:	e7a6      	b.n	8003fb6 <_vfiprintf_r+0xfe>
 8004068:	2300      	movs	r3, #0
 800406a:	f04f 0c0a 	mov.w	ip, #10
 800406e:	4619      	mov	r1, r3
 8004070:	3401      	adds	r4, #1
 8004072:	9305      	str	r3, [sp, #20]
 8004074:	4620      	mov	r0, r4
 8004076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800407a:	3a30      	subs	r2, #48	; 0x30
 800407c:	2a09      	cmp	r2, #9
 800407e:	d903      	bls.n	8004088 <_vfiprintf_r+0x1d0>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0c6      	beq.n	8004012 <_vfiprintf_r+0x15a>
 8004084:	9105      	str	r1, [sp, #20]
 8004086:	e7c4      	b.n	8004012 <_vfiprintf_r+0x15a>
 8004088:	4604      	mov	r4, r0
 800408a:	2301      	movs	r3, #1
 800408c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004090:	e7f0      	b.n	8004074 <_vfiprintf_r+0x1bc>
 8004092:	ab03      	add	r3, sp, #12
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	462a      	mov	r2, r5
 8004098:	4630      	mov	r0, r6
 800409a:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <_vfiprintf_r+0x230>)
 800409c:	a904      	add	r1, sp, #16
 800409e:	f3af 8000 	nop.w
 80040a2:	4607      	mov	r7, r0
 80040a4:	1c78      	adds	r0, r7, #1
 80040a6:	d1d6      	bne.n	8004056 <_vfiprintf_r+0x19e>
 80040a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040aa:	07d9      	lsls	r1, r3, #31
 80040ac:	d405      	bmi.n	80040ba <_vfiprintf_r+0x202>
 80040ae:	89ab      	ldrh	r3, [r5, #12]
 80040b0:	059a      	lsls	r2, r3, #22
 80040b2:	d402      	bmi.n	80040ba <_vfiprintf_r+0x202>
 80040b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040b6:	f7ff fde1 	bl	8003c7c <__retarget_lock_release_recursive>
 80040ba:	89ab      	ldrh	r3, [r5, #12]
 80040bc:	065b      	lsls	r3, r3, #25
 80040be:	f53f af1d 	bmi.w	8003efc <_vfiprintf_r+0x44>
 80040c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040c4:	e71c      	b.n	8003f00 <_vfiprintf_r+0x48>
 80040c6:	ab03      	add	r3, sp, #12
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	462a      	mov	r2, r5
 80040cc:	4630      	mov	r0, r6
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <_vfiprintf_r+0x230>)
 80040d0:	a904      	add	r1, sp, #16
 80040d2:	f000 f87d 	bl	80041d0 <_printf_i>
 80040d6:	e7e4      	b.n	80040a2 <_vfiprintf_r+0x1ea>
 80040d8:	08004832 	.word	0x08004832
 80040dc:	08004838 	.word	0x08004838
 80040e0:	0800483c 	.word	0x0800483c
 80040e4:	00000000 	.word	0x00000000
 80040e8:	08003e93 	.word	0x08003e93

080040ec <_printf_common>:
 80040ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f0:	4616      	mov	r6, r2
 80040f2:	4699      	mov	r9, r3
 80040f4:	688a      	ldr	r2, [r1, #8]
 80040f6:	690b      	ldr	r3, [r1, #16]
 80040f8:	4607      	mov	r7, r0
 80040fa:	4293      	cmp	r3, r2
 80040fc:	bfb8      	it	lt
 80040fe:	4613      	movlt	r3, r2
 8004100:	6033      	str	r3, [r6, #0]
 8004102:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004106:	460c      	mov	r4, r1
 8004108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800410c:	b10a      	cbz	r2, 8004112 <_printf_common+0x26>
 800410e:	3301      	adds	r3, #1
 8004110:	6033      	str	r3, [r6, #0]
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	0699      	lsls	r1, r3, #26
 8004116:	bf42      	ittt	mi
 8004118:	6833      	ldrmi	r3, [r6, #0]
 800411a:	3302      	addmi	r3, #2
 800411c:	6033      	strmi	r3, [r6, #0]
 800411e:	6825      	ldr	r5, [r4, #0]
 8004120:	f015 0506 	ands.w	r5, r5, #6
 8004124:	d106      	bne.n	8004134 <_printf_common+0x48>
 8004126:	f104 0a19 	add.w	sl, r4, #25
 800412a:	68e3      	ldr	r3, [r4, #12]
 800412c:	6832      	ldr	r2, [r6, #0]
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	42ab      	cmp	r3, r5
 8004132:	dc2b      	bgt.n	800418c <_printf_common+0xa0>
 8004134:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004138:	1e13      	subs	r3, r2, #0
 800413a:	6822      	ldr	r2, [r4, #0]
 800413c:	bf18      	it	ne
 800413e:	2301      	movne	r3, #1
 8004140:	0692      	lsls	r2, r2, #26
 8004142:	d430      	bmi.n	80041a6 <_printf_common+0xba>
 8004144:	4649      	mov	r1, r9
 8004146:	4638      	mov	r0, r7
 8004148:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800414c:	47c0      	blx	r8
 800414e:	3001      	adds	r0, #1
 8004150:	d023      	beq.n	800419a <_printf_common+0xae>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	6922      	ldr	r2, [r4, #16]
 8004156:	f003 0306 	and.w	r3, r3, #6
 800415a:	2b04      	cmp	r3, #4
 800415c:	bf14      	ite	ne
 800415e:	2500      	movne	r5, #0
 8004160:	6833      	ldreq	r3, [r6, #0]
 8004162:	f04f 0600 	mov.w	r6, #0
 8004166:	bf08      	it	eq
 8004168:	68e5      	ldreq	r5, [r4, #12]
 800416a:	f104 041a 	add.w	r4, r4, #26
 800416e:	bf08      	it	eq
 8004170:	1aed      	subeq	r5, r5, r3
 8004172:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004176:	bf08      	it	eq
 8004178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800417c:	4293      	cmp	r3, r2
 800417e:	bfc4      	itt	gt
 8004180:	1a9b      	subgt	r3, r3, r2
 8004182:	18ed      	addgt	r5, r5, r3
 8004184:	42b5      	cmp	r5, r6
 8004186:	d11a      	bne.n	80041be <_printf_common+0xd2>
 8004188:	2000      	movs	r0, #0
 800418a:	e008      	b.n	800419e <_printf_common+0xb2>
 800418c:	2301      	movs	r3, #1
 800418e:	4652      	mov	r2, sl
 8004190:	4649      	mov	r1, r9
 8004192:	4638      	mov	r0, r7
 8004194:	47c0      	blx	r8
 8004196:	3001      	adds	r0, #1
 8004198:	d103      	bne.n	80041a2 <_printf_common+0xb6>
 800419a:	f04f 30ff 	mov.w	r0, #4294967295
 800419e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a2:	3501      	adds	r5, #1
 80041a4:	e7c1      	b.n	800412a <_printf_common+0x3e>
 80041a6:	2030      	movs	r0, #48	; 0x30
 80041a8:	18e1      	adds	r1, r4, r3
 80041aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041b4:	4422      	add	r2, r4
 80041b6:	3302      	adds	r3, #2
 80041b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041bc:	e7c2      	b.n	8004144 <_printf_common+0x58>
 80041be:	2301      	movs	r3, #1
 80041c0:	4622      	mov	r2, r4
 80041c2:	4649      	mov	r1, r9
 80041c4:	4638      	mov	r0, r7
 80041c6:	47c0      	blx	r8
 80041c8:	3001      	adds	r0, #1
 80041ca:	d0e6      	beq.n	800419a <_printf_common+0xae>
 80041cc:	3601      	adds	r6, #1
 80041ce:	e7d9      	b.n	8004184 <_printf_common+0x98>

080041d0 <_printf_i>:
 80041d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041d4:	7e0f      	ldrb	r7, [r1, #24]
 80041d6:	4691      	mov	r9, r2
 80041d8:	2f78      	cmp	r7, #120	; 0x78
 80041da:	4680      	mov	r8, r0
 80041dc:	460c      	mov	r4, r1
 80041de:	469a      	mov	sl, r3
 80041e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041e6:	d807      	bhi.n	80041f8 <_printf_i+0x28>
 80041e8:	2f62      	cmp	r7, #98	; 0x62
 80041ea:	d80a      	bhi.n	8004202 <_printf_i+0x32>
 80041ec:	2f00      	cmp	r7, #0
 80041ee:	f000 80d5 	beq.w	800439c <_printf_i+0x1cc>
 80041f2:	2f58      	cmp	r7, #88	; 0x58
 80041f4:	f000 80c1 	beq.w	800437a <_printf_i+0x1aa>
 80041f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004200:	e03a      	b.n	8004278 <_printf_i+0xa8>
 8004202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004206:	2b15      	cmp	r3, #21
 8004208:	d8f6      	bhi.n	80041f8 <_printf_i+0x28>
 800420a:	a101      	add	r1, pc, #4	; (adr r1, 8004210 <_printf_i+0x40>)
 800420c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004210:	08004269 	.word	0x08004269
 8004214:	0800427d 	.word	0x0800427d
 8004218:	080041f9 	.word	0x080041f9
 800421c:	080041f9 	.word	0x080041f9
 8004220:	080041f9 	.word	0x080041f9
 8004224:	080041f9 	.word	0x080041f9
 8004228:	0800427d 	.word	0x0800427d
 800422c:	080041f9 	.word	0x080041f9
 8004230:	080041f9 	.word	0x080041f9
 8004234:	080041f9 	.word	0x080041f9
 8004238:	080041f9 	.word	0x080041f9
 800423c:	08004383 	.word	0x08004383
 8004240:	080042a9 	.word	0x080042a9
 8004244:	0800433d 	.word	0x0800433d
 8004248:	080041f9 	.word	0x080041f9
 800424c:	080041f9 	.word	0x080041f9
 8004250:	080043a5 	.word	0x080043a5
 8004254:	080041f9 	.word	0x080041f9
 8004258:	080042a9 	.word	0x080042a9
 800425c:	080041f9 	.word	0x080041f9
 8004260:	080041f9 	.word	0x080041f9
 8004264:	08004345 	.word	0x08004345
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	1d1a      	adds	r2, r3, #4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	602a      	str	r2, [r5, #0]
 8004270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004278:	2301      	movs	r3, #1
 800427a:	e0a0      	b.n	80043be <_printf_i+0x1ee>
 800427c:	6820      	ldr	r0, [r4, #0]
 800427e:	682b      	ldr	r3, [r5, #0]
 8004280:	0607      	lsls	r7, r0, #24
 8004282:	f103 0104 	add.w	r1, r3, #4
 8004286:	6029      	str	r1, [r5, #0]
 8004288:	d501      	bpl.n	800428e <_printf_i+0xbe>
 800428a:	681e      	ldr	r6, [r3, #0]
 800428c:	e003      	b.n	8004296 <_printf_i+0xc6>
 800428e:	0646      	lsls	r6, r0, #25
 8004290:	d5fb      	bpl.n	800428a <_printf_i+0xba>
 8004292:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004296:	2e00      	cmp	r6, #0
 8004298:	da03      	bge.n	80042a2 <_printf_i+0xd2>
 800429a:	232d      	movs	r3, #45	; 0x2d
 800429c:	4276      	negs	r6, r6
 800429e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a2:	230a      	movs	r3, #10
 80042a4:	4859      	ldr	r0, [pc, #356]	; (800440c <_printf_i+0x23c>)
 80042a6:	e012      	b.n	80042ce <_printf_i+0xfe>
 80042a8:	682b      	ldr	r3, [r5, #0]
 80042aa:	6820      	ldr	r0, [r4, #0]
 80042ac:	1d19      	adds	r1, r3, #4
 80042ae:	6029      	str	r1, [r5, #0]
 80042b0:	0605      	lsls	r5, r0, #24
 80042b2:	d501      	bpl.n	80042b8 <_printf_i+0xe8>
 80042b4:	681e      	ldr	r6, [r3, #0]
 80042b6:	e002      	b.n	80042be <_printf_i+0xee>
 80042b8:	0641      	lsls	r1, r0, #25
 80042ba:	d5fb      	bpl.n	80042b4 <_printf_i+0xe4>
 80042bc:	881e      	ldrh	r6, [r3, #0]
 80042be:	2f6f      	cmp	r7, #111	; 0x6f
 80042c0:	bf0c      	ite	eq
 80042c2:	2308      	moveq	r3, #8
 80042c4:	230a      	movne	r3, #10
 80042c6:	4851      	ldr	r0, [pc, #324]	; (800440c <_printf_i+0x23c>)
 80042c8:	2100      	movs	r1, #0
 80042ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042ce:	6865      	ldr	r5, [r4, #4]
 80042d0:	2d00      	cmp	r5, #0
 80042d2:	bfa8      	it	ge
 80042d4:	6821      	ldrge	r1, [r4, #0]
 80042d6:	60a5      	str	r5, [r4, #8]
 80042d8:	bfa4      	itt	ge
 80042da:	f021 0104 	bicge.w	r1, r1, #4
 80042de:	6021      	strge	r1, [r4, #0]
 80042e0:	b90e      	cbnz	r6, 80042e6 <_printf_i+0x116>
 80042e2:	2d00      	cmp	r5, #0
 80042e4:	d04b      	beq.n	800437e <_printf_i+0x1ae>
 80042e6:	4615      	mov	r5, r2
 80042e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80042ec:	fb03 6711 	mls	r7, r3, r1, r6
 80042f0:	5dc7      	ldrb	r7, [r0, r7]
 80042f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042f6:	4637      	mov	r7, r6
 80042f8:	42bb      	cmp	r3, r7
 80042fa:	460e      	mov	r6, r1
 80042fc:	d9f4      	bls.n	80042e8 <_printf_i+0x118>
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d10b      	bne.n	800431a <_printf_i+0x14a>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	07de      	lsls	r6, r3, #31
 8004306:	d508      	bpl.n	800431a <_printf_i+0x14a>
 8004308:	6923      	ldr	r3, [r4, #16]
 800430a:	6861      	ldr	r1, [r4, #4]
 800430c:	4299      	cmp	r1, r3
 800430e:	bfde      	ittt	le
 8004310:	2330      	movle	r3, #48	; 0x30
 8004312:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004316:	f105 35ff 	addle.w	r5, r5, #4294967295
 800431a:	1b52      	subs	r2, r2, r5
 800431c:	6122      	str	r2, [r4, #16]
 800431e:	464b      	mov	r3, r9
 8004320:	4621      	mov	r1, r4
 8004322:	4640      	mov	r0, r8
 8004324:	f8cd a000 	str.w	sl, [sp]
 8004328:	aa03      	add	r2, sp, #12
 800432a:	f7ff fedf 	bl	80040ec <_printf_common>
 800432e:	3001      	adds	r0, #1
 8004330:	d14a      	bne.n	80043c8 <_printf_i+0x1f8>
 8004332:	f04f 30ff 	mov.w	r0, #4294967295
 8004336:	b004      	add	sp, #16
 8004338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	f043 0320 	orr.w	r3, r3, #32
 8004342:	6023      	str	r3, [r4, #0]
 8004344:	2778      	movs	r7, #120	; 0x78
 8004346:	4832      	ldr	r0, [pc, #200]	; (8004410 <_printf_i+0x240>)
 8004348:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	6829      	ldr	r1, [r5, #0]
 8004350:	061f      	lsls	r7, r3, #24
 8004352:	f851 6b04 	ldr.w	r6, [r1], #4
 8004356:	d402      	bmi.n	800435e <_printf_i+0x18e>
 8004358:	065f      	lsls	r7, r3, #25
 800435a:	bf48      	it	mi
 800435c:	b2b6      	uxthmi	r6, r6
 800435e:	07df      	lsls	r7, r3, #31
 8004360:	bf48      	it	mi
 8004362:	f043 0320 	orrmi.w	r3, r3, #32
 8004366:	6029      	str	r1, [r5, #0]
 8004368:	bf48      	it	mi
 800436a:	6023      	strmi	r3, [r4, #0]
 800436c:	b91e      	cbnz	r6, 8004376 <_printf_i+0x1a6>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	f023 0320 	bic.w	r3, r3, #32
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	2310      	movs	r3, #16
 8004378:	e7a6      	b.n	80042c8 <_printf_i+0xf8>
 800437a:	4824      	ldr	r0, [pc, #144]	; (800440c <_printf_i+0x23c>)
 800437c:	e7e4      	b.n	8004348 <_printf_i+0x178>
 800437e:	4615      	mov	r5, r2
 8004380:	e7bd      	b.n	80042fe <_printf_i+0x12e>
 8004382:	682b      	ldr	r3, [r5, #0]
 8004384:	6826      	ldr	r6, [r4, #0]
 8004386:	1d18      	adds	r0, r3, #4
 8004388:	6961      	ldr	r1, [r4, #20]
 800438a:	6028      	str	r0, [r5, #0]
 800438c:	0635      	lsls	r5, r6, #24
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	d501      	bpl.n	8004396 <_printf_i+0x1c6>
 8004392:	6019      	str	r1, [r3, #0]
 8004394:	e002      	b.n	800439c <_printf_i+0x1cc>
 8004396:	0670      	lsls	r0, r6, #25
 8004398:	d5fb      	bpl.n	8004392 <_printf_i+0x1c2>
 800439a:	8019      	strh	r1, [r3, #0]
 800439c:	2300      	movs	r3, #0
 800439e:	4615      	mov	r5, r2
 80043a0:	6123      	str	r3, [r4, #16]
 80043a2:	e7bc      	b.n	800431e <_printf_i+0x14e>
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	2100      	movs	r1, #0
 80043a8:	1d1a      	adds	r2, r3, #4
 80043aa:	602a      	str	r2, [r5, #0]
 80043ac:	681d      	ldr	r5, [r3, #0]
 80043ae:	6862      	ldr	r2, [r4, #4]
 80043b0:	4628      	mov	r0, r5
 80043b2:	f000 f97f 	bl	80046b4 <memchr>
 80043b6:	b108      	cbz	r0, 80043bc <_printf_i+0x1ec>
 80043b8:	1b40      	subs	r0, r0, r5
 80043ba:	6060      	str	r0, [r4, #4]
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	6123      	str	r3, [r4, #16]
 80043c0:	2300      	movs	r3, #0
 80043c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c6:	e7aa      	b.n	800431e <_printf_i+0x14e>
 80043c8:	462a      	mov	r2, r5
 80043ca:	4649      	mov	r1, r9
 80043cc:	4640      	mov	r0, r8
 80043ce:	6923      	ldr	r3, [r4, #16]
 80043d0:	47d0      	blx	sl
 80043d2:	3001      	adds	r0, #1
 80043d4:	d0ad      	beq.n	8004332 <_printf_i+0x162>
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	079b      	lsls	r3, r3, #30
 80043da:	d413      	bmi.n	8004404 <_printf_i+0x234>
 80043dc:	68e0      	ldr	r0, [r4, #12]
 80043de:	9b03      	ldr	r3, [sp, #12]
 80043e0:	4298      	cmp	r0, r3
 80043e2:	bfb8      	it	lt
 80043e4:	4618      	movlt	r0, r3
 80043e6:	e7a6      	b.n	8004336 <_printf_i+0x166>
 80043e8:	2301      	movs	r3, #1
 80043ea:	4632      	mov	r2, r6
 80043ec:	4649      	mov	r1, r9
 80043ee:	4640      	mov	r0, r8
 80043f0:	47d0      	blx	sl
 80043f2:	3001      	adds	r0, #1
 80043f4:	d09d      	beq.n	8004332 <_printf_i+0x162>
 80043f6:	3501      	adds	r5, #1
 80043f8:	68e3      	ldr	r3, [r4, #12]
 80043fa:	9903      	ldr	r1, [sp, #12]
 80043fc:	1a5b      	subs	r3, r3, r1
 80043fe:	42ab      	cmp	r3, r5
 8004400:	dcf2      	bgt.n	80043e8 <_printf_i+0x218>
 8004402:	e7eb      	b.n	80043dc <_printf_i+0x20c>
 8004404:	2500      	movs	r5, #0
 8004406:	f104 0619 	add.w	r6, r4, #25
 800440a:	e7f5      	b.n	80043f8 <_printf_i+0x228>
 800440c:	08004843 	.word	0x08004843
 8004410:	08004854 	.word	0x08004854

08004414 <__sflush_r>:
 8004414:	898a      	ldrh	r2, [r1, #12]
 8004416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004418:	4605      	mov	r5, r0
 800441a:	0710      	lsls	r0, r2, #28
 800441c:	460c      	mov	r4, r1
 800441e:	d457      	bmi.n	80044d0 <__sflush_r+0xbc>
 8004420:	684b      	ldr	r3, [r1, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	dc04      	bgt.n	8004430 <__sflush_r+0x1c>
 8004426:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	dc01      	bgt.n	8004430 <__sflush_r+0x1c>
 800442c:	2000      	movs	r0, #0
 800442e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004432:	2e00      	cmp	r6, #0
 8004434:	d0fa      	beq.n	800442c <__sflush_r+0x18>
 8004436:	2300      	movs	r3, #0
 8004438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800443c:	682f      	ldr	r7, [r5, #0]
 800443e:	6a21      	ldr	r1, [r4, #32]
 8004440:	602b      	str	r3, [r5, #0]
 8004442:	d032      	beq.n	80044aa <__sflush_r+0x96>
 8004444:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	075a      	lsls	r2, r3, #29
 800444a:	d505      	bpl.n	8004458 <__sflush_r+0x44>
 800444c:	6863      	ldr	r3, [r4, #4]
 800444e:	1ac0      	subs	r0, r0, r3
 8004450:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004452:	b10b      	cbz	r3, 8004458 <__sflush_r+0x44>
 8004454:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004456:	1ac0      	subs	r0, r0, r3
 8004458:	2300      	movs	r3, #0
 800445a:	4602      	mov	r2, r0
 800445c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800445e:	4628      	mov	r0, r5
 8004460:	6a21      	ldr	r1, [r4, #32]
 8004462:	47b0      	blx	r6
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	d106      	bne.n	8004478 <__sflush_r+0x64>
 800446a:	6829      	ldr	r1, [r5, #0]
 800446c:	291d      	cmp	r1, #29
 800446e:	d82b      	bhi.n	80044c8 <__sflush_r+0xb4>
 8004470:	4a28      	ldr	r2, [pc, #160]	; (8004514 <__sflush_r+0x100>)
 8004472:	410a      	asrs	r2, r1
 8004474:	07d6      	lsls	r6, r2, #31
 8004476:	d427      	bmi.n	80044c8 <__sflush_r+0xb4>
 8004478:	2200      	movs	r2, #0
 800447a:	6062      	str	r2, [r4, #4]
 800447c:	6922      	ldr	r2, [r4, #16]
 800447e:	04d9      	lsls	r1, r3, #19
 8004480:	6022      	str	r2, [r4, #0]
 8004482:	d504      	bpl.n	800448e <__sflush_r+0x7a>
 8004484:	1c42      	adds	r2, r0, #1
 8004486:	d101      	bne.n	800448c <__sflush_r+0x78>
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	b903      	cbnz	r3, 800448e <__sflush_r+0x7a>
 800448c:	6560      	str	r0, [r4, #84]	; 0x54
 800448e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004490:	602f      	str	r7, [r5, #0]
 8004492:	2900      	cmp	r1, #0
 8004494:	d0ca      	beq.n	800442c <__sflush_r+0x18>
 8004496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800449a:	4299      	cmp	r1, r3
 800449c:	d002      	beq.n	80044a4 <__sflush_r+0x90>
 800449e:	4628      	mov	r0, r5
 80044a0:	f7ff fbee 	bl	8003c80 <_free_r>
 80044a4:	2000      	movs	r0, #0
 80044a6:	6360      	str	r0, [r4, #52]	; 0x34
 80044a8:	e7c1      	b.n	800442e <__sflush_r+0x1a>
 80044aa:	2301      	movs	r3, #1
 80044ac:	4628      	mov	r0, r5
 80044ae:	47b0      	blx	r6
 80044b0:	1c41      	adds	r1, r0, #1
 80044b2:	d1c8      	bne.n	8004446 <__sflush_r+0x32>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0c5      	beq.n	8004446 <__sflush_r+0x32>
 80044ba:	2b1d      	cmp	r3, #29
 80044bc:	d001      	beq.n	80044c2 <__sflush_r+0xae>
 80044be:	2b16      	cmp	r3, #22
 80044c0:	d101      	bne.n	80044c6 <__sflush_r+0xb2>
 80044c2:	602f      	str	r7, [r5, #0]
 80044c4:	e7b2      	b.n	800442c <__sflush_r+0x18>
 80044c6:	89a3      	ldrh	r3, [r4, #12]
 80044c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044cc:	81a3      	strh	r3, [r4, #12]
 80044ce:	e7ae      	b.n	800442e <__sflush_r+0x1a>
 80044d0:	690f      	ldr	r7, [r1, #16]
 80044d2:	2f00      	cmp	r7, #0
 80044d4:	d0aa      	beq.n	800442c <__sflush_r+0x18>
 80044d6:	0793      	lsls	r3, r2, #30
 80044d8:	bf18      	it	ne
 80044da:	2300      	movne	r3, #0
 80044dc:	680e      	ldr	r6, [r1, #0]
 80044de:	bf08      	it	eq
 80044e0:	694b      	ldreq	r3, [r1, #20]
 80044e2:	1bf6      	subs	r6, r6, r7
 80044e4:	600f      	str	r7, [r1, #0]
 80044e6:	608b      	str	r3, [r1, #8]
 80044e8:	2e00      	cmp	r6, #0
 80044ea:	dd9f      	ble.n	800442c <__sflush_r+0x18>
 80044ec:	4633      	mov	r3, r6
 80044ee:	463a      	mov	r2, r7
 80044f0:	4628      	mov	r0, r5
 80044f2:	6a21      	ldr	r1, [r4, #32]
 80044f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80044f8:	47e0      	blx	ip
 80044fa:	2800      	cmp	r0, #0
 80044fc:	dc06      	bgt.n	800450c <__sflush_r+0xf8>
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f04f 30ff 	mov.w	r0, #4294967295
 8004504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004508:	81a3      	strh	r3, [r4, #12]
 800450a:	e790      	b.n	800442e <__sflush_r+0x1a>
 800450c:	4407      	add	r7, r0
 800450e:	1a36      	subs	r6, r6, r0
 8004510:	e7ea      	b.n	80044e8 <__sflush_r+0xd4>
 8004512:	bf00      	nop
 8004514:	dfbffffe 	.word	0xdfbffffe

08004518 <_fflush_r>:
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	690b      	ldr	r3, [r1, #16]
 800451c:	4605      	mov	r5, r0
 800451e:	460c      	mov	r4, r1
 8004520:	b913      	cbnz	r3, 8004528 <_fflush_r+0x10>
 8004522:	2500      	movs	r5, #0
 8004524:	4628      	mov	r0, r5
 8004526:	bd38      	pop	{r3, r4, r5, pc}
 8004528:	b118      	cbz	r0, 8004532 <_fflush_r+0x1a>
 800452a:	6a03      	ldr	r3, [r0, #32]
 800452c:	b90b      	cbnz	r3, 8004532 <_fflush_r+0x1a>
 800452e:	f7ff fa9f 	bl	8003a70 <__sinit>
 8004532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f3      	beq.n	8004522 <_fflush_r+0xa>
 800453a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800453c:	07d0      	lsls	r0, r2, #31
 800453e:	d404      	bmi.n	800454a <_fflush_r+0x32>
 8004540:	0599      	lsls	r1, r3, #22
 8004542:	d402      	bmi.n	800454a <_fflush_r+0x32>
 8004544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004546:	f7ff fb98 	bl	8003c7a <__retarget_lock_acquire_recursive>
 800454a:	4628      	mov	r0, r5
 800454c:	4621      	mov	r1, r4
 800454e:	f7ff ff61 	bl	8004414 <__sflush_r>
 8004552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004554:	4605      	mov	r5, r0
 8004556:	07da      	lsls	r2, r3, #31
 8004558:	d4e4      	bmi.n	8004524 <_fflush_r+0xc>
 800455a:	89a3      	ldrh	r3, [r4, #12]
 800455c:	059b      	lsls	r3, r3, #22
 800455e:	d4e1      	bmi.n	8004524 <_fflush_r+0xc>
 8004560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004562:	f7ff fb8b 	bl	8003c7c <__retarget_lock_release_recursive>
 8004566:	e7dd      	b.n	8004524 <_fflush_r+0xc>

08004568 <__swbuf_r>:
 8004568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456a:	460e      	mov	r6, r1
 800456c:	4614      	mov	r4, r2
 800456e:	4605      	mov	r5, r0
 8004570:	b118      	cbz	r0, 800457a <__swbuf_r+0x12>
 8004572:	6a03      	ldr	r3, [r0, #32]
 8004574:	b90b      	cbnz	r3, 800457a <__swbuf_r+0x12>
 8004576:	f7ff fa7b 	bl	8003a70 <__sinit>
 800457a:	69a3      	ldr	r3, [r4, #24]
 800457c:	60a3      	str	r3, [r4, #8]
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	071a      	lsls	r2, r3, #28
 8004582:	d525      	bpl.n	80045d0 <__swbuf_r+0x68>
 8004584:	6923      	ldr	r3, [r4, #16]
 8004586:	b31b      	cbz	r3, 80045d0 <__swbuf_r+0x68>
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	6922      	ldr	r2, [r4, #16]
 800458c:	b2f6      	uxtb	r6, r6
 800458e:	1a98      	subs	r0, r3, r2
 8004590:	6963      	ldr	r3, [r4, #20]
 8004592:	4637      	mov	r7, r6
 8004594:	4283      	cmp	r3, r0
 8004596:	dc04      	bgt.n	80045a2 <__swbuf_r+0x3a>
 8004598:	4621      	mov	r1, r4
 800459a:	4628      	mov	r0, r5
 800459c:	f7ff ffbc 	bl	8004518 <_fflush_r>
 80045a0:	b9e0      	cbnz	r0, 80045dc <__swbuf_r+0x74>
 80045a2:	68a3      	ldr	r3, [r4, #8]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	60a3      	str	r3, [r4, #8]
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	6022      	str	r2, [r4, #0]
 80045ae:	701e      	strb	r6, [r3, #0]
 80045b0:	6962      	ldr	r2, [r4, #20]
 80045b2:	1c43      	adds	r3, r0, #1
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d004      	beq.n	80045c2 <__swbuf_r+0x5a>
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	07db      	lsls	r3, r3, #31
 80045bc:	d506      	bpl.n	80045cc <__swbuf_r+0x64>
 80045be:	2e0a      	cmp	r6, #10
 80045c0:	d104      	bne.n	80045cc <__swbuf_r+0x64>
 80045c2:	4621      	mov	r1, r4
 80045c4:	4628      	mov	r0, r5
 80045c6:	f7ff ffa7 	bl	8004518 <_fflush_r>
 80045ca:	b938      	cbnz	r0, 80045dc <__swbuf_r+0x74>
 80045cc:	4638      	mov	r0, r7
 80045ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045d0:	4621      	mov	r1, r4
 80045d2:	4628      	mov	r0, r5
 80045d4:	f000 f806 	bl	80045e4 <__swsetup_r>
 80045d8:	2800      	cmp	r0, #0
 80045da:	d0d5      	beq.n	8004588 <__swbuf_r+0x20>
 80045dc:	f04f 37ff 	mov.w	r7, #4294967295
 80045e0:	e7f4      	b.n	80045cc <__swbuf_r+0x64>
	...

080045e4 <__swsetup_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4b2a      	ldr	r3, [pc, #168]	; (8004690 <__swsetup_r+0xac>)
 80045e8:	4605      	mov	r5, r0
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	460c      	mov	r4, r1
 80045ee:	b118      	cbz	r0, 80045f8 <__swsetup_r+0x14>
 80045f0:	6a03      	ldr	r3, [r0, #32]
 80045f2:	b90b      	cbnz	r3, 80045f8 <__swsetup_r+0x14>
 80045f4:	f7ff fa3c 	bl	8003a70 <__sinit>
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045fe:	0718      	lsls	r0, r3, #28
 8004600:	d422      	bmi.n	8004648 <__swsetup_r+0x64>
 8004602:	06d9      	lsls	r1, r3, #27
 8004604:	d407      	bmi.n	8004616 <__swsetup_r+0x32>
 8004606:	2309      	movs	r3, #9
 8004608:	602b      	str	r3, [r5, #0]
 800460a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800460e:	f04f 30ff 	mov.w	r0, #4294967295
 8004612:	81a3      	strh	r3, [r4, #12]
 8004614:	e034      	b.n	8004680 <__swsetup_r+0x9c>
 8004616:	0758      	lsls	r0, r3, #29
 8004618:	d512      	bpl.n	8004640 <__swsetup_r+0x5c>
 800461a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800461c:	b141      	cbz	r1, 8004630 <__swsetup_r+0x4c>
 800461e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004622:	4299      	cmp	r1, r3
 8004624:	d002      	beq.n	800462c <__swsetup_r+0x48>
 8004626:	4628      	mov	r0, r5
 8004628:	f7ff fb2a 	bl	8003c80 <_free_r>
 800462c:	2300      	movs	r3, #0
 800462e:	6363      	str	r3, [r4, #52]	; 0x34
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004636:	81a3      	strh	r3, [r4, #12]
 8004638:	2300      	movs	r3, #0
 800463a:	6063      	str	r3, [r4, #4]
 800463c:	6923      	ldr	r3, [r4, #16]
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	f043 0308 	orr.w	r3, r3, #8
 8004646:	81a3      	strh	r3, [r4, #12]
 8004648:	6923      	ldr	r3, [r4, #16]
 800464a:	b94b      	cbnz	r3, 8004660 <__swsetup_r+0x7c>
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004656:	d003      	beq.n	8004660 <__swsetup_r+0x7c>
 8004658:	4621      	mov	r1, r4
 800465a:	4628      	mov	r0, r5
 800465c:	f000 f85d 	bl	800471a <__smakebuf_r>
 8004660:	89a0      	ldrh	r0, [r4, #12]
 8004662:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004666:	f010 0301 	ands.w	r3, r0, #1
 800466a:	d00a      	beq.n	8004682 <__swsetup_r+0x9e>
 800466c:	2300      	movs	r3, #0
 800466e:	60a3      	str	r3, [r4, #8]
 8004670:	6963      	ldr	r3, [r4, #20]
 8004672:	425b      	negs	r3, r3
 8004674:	61a3      	str	r3, [r4, #24]
 8004676:	6923      	ldr	r3, [r4, #16]
 8004678:	b943      	cbnz	r3, 800468c <__swsetup_r+0xa8>
 800467a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800467e:	d1c4      	bne.n	800460a <__swsetup_r+0x26>
 8004680:	bd38      	pop	{r3, r4, r5, pc}
 8004682:	0781      	lsls	r1, r0, #30
 8004684:	bf58      	it	pl
 8004686:	6963      	ldrpl	r3, [r4, #20]
 8004688:	60a3      	str	r3, [r4, #8]
 800468a:	e7f4      	b.n	8004676 <__swsetup_r+0x92>
 800468c:	2000      	movs	r0, #0
 800468e:	e7f7      	b.n	8004680 <__swsetup_r+0x9c>
 8004690:	20000064 	.word	0x20000064

08004694 <_sbrk_r>:
 8004694:	b538      	push	{r3, r4, r5, lr}
 8004696:	2300      	movs	r3, #0
 8004698:	4d05      	ldr	r5, [pc, #20]	; (80046b0 <_sbrk_r+0x1c>)
 800469a:	4604      	mov	r4, r0
 800469c:	4608      	mov	r0, r1
 800469e:	602b      	str	r3, [r5, #0]
 80046a0:	f7fc ff76 	bl	8001590 <_sbrk>
 80046a4:	1c43      	adds	r3, r0, #1
 80046a6:	d102      	bne.n	80046ae <_sbrk_r+0x1a>
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	b103      	cbz	r3, 80046ae <_sbrk_r+0x1a>
 80046ac:	6023      	str	r3, [r4, #0]
 80046ae:	bd38      	pop	{r3, r4, r5, pc}
 80046b0:	200002f4 	.word	0x200002f4

080046b4 <memchr>:
 80046b4:	4603      	mov	r3, r0
 80046b6:	b510      	push	{r4, lr}
 80046b8:	b2c9      	uxtb	r1, r1
 80046ba:	4402      	add	r2, r0
 80046bc:	4293      	cmp	r3, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	d101      	bne.n	80046c6 <memchr+0x12>
 80046c2:	2000      	movs	r0, #0
 80046c4:	e003      	b.n	80046ce <memchr+0x1a>
 80046c6:	7804      	ldrb	r4, [r0, #0]
 80046c8:	3301      	adds	r3, #1
 80046ca:	428c      	cmp	r4, r1
 80046cc:	d1f6      	bne.n	80046bc <memchr+0x8>
 80046ce:	bd10      	pop	{r4, pc}

080046d0 <__swhatbuf_r>:
 80046d0:	b570      	push	{r4, r5, r6, lr}
 80046d2:	460c      	mov	r4, r1
 80046d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d8:	4615      	mov	r5, r2
 80046da:	2900      	cmp	r1, #0
 80046dc:	461e      	mov	r6, r3
 80046de:	b096      	sub	sp, #88	; 0x58
 80046e0:	da0c      	bge.n	80046fc <__swhatbuf_r+0x2c>
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	2100      	movs	r1, #0
 80046e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80046ea:	bf0c      	ite	eq
 80046ec:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80046f0:	2340      	movne	r3, #64	; 0x40
 80046f2:	2000      	movs	r0, #0
 80046f4:	6031      	str	r1, [r6, #0]
 80046f6:	602b      	str	r3, [r5, #0]
 80046f8:	b016      	add	sp, #88	; 0x58
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	466a      	mov	r2, sp
 80046fe:	f000 f849 	bl	8004794 <_fstat_r>
 8004702:	2800      	cmp	r0, #0
 8004704:	dbed      	blt.n	80046e2 <__swhatbuf_r+0x12>
 8004706:	9901      	ldr	r1, [sp, #4]
 8004708:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800470c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004710:	4259      	negs	r1, r3
 8004712:	4159      	adcs	r1, r3
 8004714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004718:	e7eb      	b.n	80046f2 <__swhatbuf_r+0x22>

0800471a <__smakebuf_r>:
 800471a:	898b      	ldrh	r3, [r1, #12]
 800471c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800471e:	079d      	lsls	r5, r3, #30
 8004720:	4606      	mov	r6, r0
 8004722:	460c      	mov	r4, r1
 8004724:	d507      	bpl.n	8004736 <__smakebuf_r+0x1c>
 8004726:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800472a:	6023      	str	r3, [r4, #0]
 800472c:	6123      	str	r3, [r4, #16]
 800472e:	2301      	movs	r3, #1
 8004730:	6163      	str	r3, [r4, #20]
 8004732:	b002      	add	sp, #8
 8004734:	bd70      	pop	{r4, r5, r6, pc}
 8004736:	466a      	mov	r2, sp
 8004738:	ab01      	add	r3, sp, #4
 800473a:	f7ff ffc9 	bl	80046d0 <__swhatbuf_r>
 800473e:	9900      	ldr	r1, [sp, #0]
 8004740:	4605      	mov	r5, r0
 8004742:	4630      	mov	r0, r6
 8004744:	f7ff fb04 	bl	8003d50 <_malloc_r>
 8004748:	b948      	cbnz	r0, 800475e <__smakebuf_r+0x44>
 800474a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800474e:	059a      	lsls	r2, r3, #22
 8004750:	d4ef      	bmi.n	8004732 <__smakebuf_r+0x18>
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	f043 0302 	orr.w	r3, r3, #2
 800475a:	81a3      	strh	r3, [r4, #12]
 800475c:	e7e3      	b.n	8004726 <__smakebuf_r+0xc>
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	6020      	str	r0, [r4, #0]
 8004762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004766:	81a3      	strh	r3, [r4, #12]
 8004768:	9b00      	ldr	r3, [sp, #0]
 800476a:	6120      	str	r0, [r4, #16]
 800476c:	6163      	str	r3, [r4, #20]
 800476e:	9b01      	ldr	r3, [sp, #4]
 8004770:	b15b      	cbz	r3, 800478a <__smakebuf_r+0x70>
 8004772:	4630      	mov	r0, r6
 8004774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004778:	f000 f81e 	bl	80047b8 <_isatty_r>
 800477c:	b128      	cbz	r0, 800478a <__smakebuf_r+0x70>
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	f023 0303 	bic.w	r3, r3, #3
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	81a3      	strh	r3, [r4, #12]
 800478a:	89a3      	ldrh	r3, [r4, #12]
 800478c:	431d      	orrs	r5, r3
 800478e:	81a5      	strh	r5, [r4, #12]
 8004790:	e7cf      	b.n	8004732 <__smakebuf_r+0x18>
	...

08004794 <_fstat_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	2300      	movs	r3, #0
 8004798:	4d06      	ldr	r5, [pc, #24]	; (80047b4 <_fstat_r+0x20>)
 800479a:	4604      	mov	r4, r0
 800479c:	4608      	mov	r0, r1
 800479e:	4611      	mov	r1, r2
 80047a0:	602b      	str	r3, [r5, #0]
 80047a2:	f7fc fecf 	bl	8001544 <_fstat>
 80047a6:	1c43      	adds	r3, r0, #1
 80047a8:	d102      	bne.n	80047b0 <_fstat_r+0x1c>
 80047aa:	682b      	ldr	r3, [r5, #0]
 80047ac:	b103      	cbz	r3, 80047b0 <_fstat_r+0x1c>
 80047ae:	6023      	str	r3, [r4, #0]
 80047b0:	bd38      	pop	{r3, r4, r5, pc}
 80047b2:	bf00      	nop
 80047b4:	200002f4 	.word	0x200002f4

080047b8 <_isatty_r>:
 80047b8:	b538      	push	{r3, r4, r5, lr}
 80047ba:	2300      	movs	r3, #0
 80047bc:	4d05      	ldr	r5, [pc, #20]	; (80047d4 <_isatty_r+0x1c>)
 80047be:	4604      	mov	r4, r0
 80047c0:	4608      	mov	r0, r1
 80047c2:	602b      	str	r3, [r5, #0]
 80047c4:	f7fc fecd 	bl	8001562 <_isatty>
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	d102      	bne.n	80047d2 <_isatty_r+0x1a>
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	b103      	cbz	r3, 80047d2 <_isatty_r+0x1a>
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	bd38      	pop	{r3, r4, r5, pc}
 80047d4:	200002f4 	.word	0x200002f4

080047d8 <_init>:
 80047d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047da:	bf00      	nop
 80047dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047de:	bc08      	pop	{r3}
 80047e0:	469e      	mov	lr, r3
 80047e2:	4770      	bx	lr

080047e4 <_fini>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	bf00      	nop
 80047e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ea:	bc08      	pop	{r3}
 80047ec:	469e      	mov	lr, r3
 80047ee:	4770      	bx	lr
